/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// Datapoints struct for Datapoints
type Datapoints struct {
	Data *DatapointsData `json:"data,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewDatapoints instantiates a new Datapoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatapoints() *Datapoints {
	this := Datapoints{}
	return &this
}

// NewDatapointsWithDefaults instantiates a new Datapoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatapointsWithDefaults() *Datapoints {
	this := Datapoints{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Datapoints) GetData() DatapointsData {
	if o == nil || o.Data == nil {
		var ret DatapointsData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoints) GetDataOk() (*DatapointsData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Datapoints) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given DatapointsData and assigns it to the Data field.
func (o *Datapoints) SetData(v DatapointsData) {
	o.Data = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Datapoints) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datapoints) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Datapoints) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Datapoints) SetStatus(v string) {
	o.Status = &v
}

func (o Datapoints) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableDatapoints struct {
	value *Datapoints
	isSet bool
}

func (v NullableDatapoints) Get() *Datapoints {
	return v.value
}

func (v *NullableDatapoints) Set(val *Datapoints) {
	v.value = val
	v.isSet = true
}

func (v NullableDatapoints) IsSet() bool {
	return v.isSet
}

func (v *NullableDatapoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatapoints(val *Datapoints) *NullableDatapoints {
	return &NullableDatapoints{value: val, isSet: true}
}

func (v NullableDatapoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatapoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


