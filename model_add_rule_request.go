/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AddRuleRequest struct for AddRuleRequest
type AddRuleRequest struct {
	// The name of the rule
	Name string `json:"name"`
	// The description of the rule
	Description *string `json:"description,omitempty"`
	// Rule status (enabled, disabled)
	Enabled *bool `json:"enabled,omitempty"`
	Selectors []Selector `json:"selectors,omitempty"`
	Conditions []Condition `json:"conditions"`
	Actions []Action `json:"actions"`
	When *When `json:"when,omitempty"`
	TriggerAfter TriggerAfter `json:"trigger_after"`
}

// NewAddRuleRequest instantiates a new AddRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRuleRequest(name string, conditions []Condition, actions []Action, triggerAfter TriggerAfter) *AddRuleRequest {
	this := AddRuleRequest{}
	this.Name = name
	this.Conditions = conditions
	this.Actions = actions
	this.TriggerAfter = triggerAfter
	return &this
}

// NewAddRuleRequestWithDefaults instantiates a new AddRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRuleRequestWithDefaults() *AddRuleRequest {
	this := AddRuleRequest{}
	return &this
}

// GetName returns the Name field value
func (o *AddRuleRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddRuleRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddRuleRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddRuleRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddRuleRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AddRuleRequest) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AddRuleRequest) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AddRuleRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSelectors returns the Selectors field value if set, zero value otherwise.
func (o *AddRuleRequest) GetSelectors() []Selector {
	if o == nil || o.Selectors == nil {
		var ret []Selector
		return ret
	}
	return o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetSelectorsOk() ([]Selector, bool) {
	if o == nil || o.Selectors == nil {
		return nil, false
	}
	return o.Selectors, true
}

// HasSelectors returns a boolean if a field has been set.
func (o *AddRuleRequest) HasSelectors() bool {
	if o != nil && o.Selectors != nil {
		return true
	}

	return false
}

// SetSelectors gets a reference to the given []Selector and assigns it to the Selectors field.
func (o *AddRuleRequest) SetSelectors(v []Selector) {
	o.Selectors = v
}

// GetConditions returns the Conditions field value
func (o *AddRuleRequest) GetConditions() []Condition {
	if o == nil {
		var ret []Condition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetConditionsOk() ([]Condition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *AddRuleRequest) SetConditions(v []Condition) {
	o.Conditions = v
}

// GetActions returns the Actions field value
func (o *AddRuleRequest) GetActions() []Action {
	if o == nil {
		var ret []Action
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetActionsOk() ([]Action, bool) {
	if o == nil {
		return nil, false
	}
	return o.Actions, true
}

// SetActions sets field value
func (o *AddRuleRequest) SetActions(v []Action) {
	o.Actions = v
}

// GetWhen returns the When field value if set, zero value otherwise.
func (o *AddRuleRequest) GetWhen() When {
	if o == nil || o.When == nil {
		var ret When
		return ret
	}
	return *o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetWhenOk() (*When, bool) {
	if o == nil || o.When == nil {
		return nil, false
	}
	return o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *AddRuleRequest) HasWhen() bool {
	if o != nil && o.When != nil {
		return true
	}

	return false
}

// SetWhen gets a reference to the given When and assigns it to the When field.
func (o *AddRuleRequest) SetWhen(v When) {
	o.When = &v
}

// GetTriggerAfter returns the TriggerAfter field value
func (o *AddRuleRequest) GetTriggerAfter() TriggerAfter {
	if o == nil {
		var ret TriggerAfter
		return ret
	}

	return o.TriggerAfter
}

// GetTriggerAfterOk returns a tuple with the TriggerAfter field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetTriggerAfterOk() (*TriggerAfter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerAfter, true
}

// SetTriggerAfter sets field value
func (o *AddRuleRequest) SetTriggerAfter(v TriggerAfter) {
	o.TriggerAfter = v
}

func (o AddRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Selectors != nil {
		toSerialize["selectors"] = o.Selectors
	}
	if true {
		toSerialize["conditions"] = o.Conditions
	}
	if true {
		toSerialize["actions"] = o.Actions
	}
	if o.When != nil {
		toSerialize["when"] = o.When
	}
	if true {
		toSerialize["trigger_after"] = o.TriggerAfter
	}
	return json.Marshal(toSerialize)
}

type NullableAddRuleRequest struct {
	value *AddRuleRequest
	isSet bool
}

func (v NullableAddRuleRequest) Get() *AddRuleRequest {
	return v.value
}

func (v *NullableAddRuleRequest) Set(val *AddRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRuleRequest(val *AddRuleRequest) *NullableAddRuleRequest {
	return &NullableAddRuleRequest{value: val, isSet: true}
}

func (v NullableAddRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


