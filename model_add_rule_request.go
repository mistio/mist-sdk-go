/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AddRuleRequest struct for AddRuleRequest
type AddRuleRequest struct {
	Actions []RuleAction `json:"actions"`
	DataType DataType `json:"data_type"`
	Frequency Frequency `json:"frequency"`
	Queries []Query `json:"queries"`
	Selectors *Selector `json:"selectors,omitempty"`
	TriggerAfter TriggerAfter `json:"trigger_after"`
	Window Window `json:"window"`
}

// NewAddRuleRequest instantiates a new AddRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddRuleRequest(actions []RuleAction, dataType DataType, frequency Frequency, queries []Query, triggerAfter TriggerAfter, window Window, ) *AddRuleRequest {
	this := AddRuleRequest{}
	this.Actions = actions
	this.DataType = dataType
	this.Frequency = frequency
	this.Queries = queries
	this.TriggerAfter = triggerAfter
	this.Window = window
	return &this
}

// NewAddRuleRequestWithDefaults instantiates a new AddRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddRuleRequestWithDefaults() *AddRuleRequest {
	this := AddRuleRequest{}
	return &this
}

// GetActions returns the Actions field value
func (o *AddRuleRequest) GetActions() []RuleAction {
	if o == nil  {
		var ret []RuleAction
		return ret
	}

	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetActionsOk() (*[]RuleAction, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Actions, true
}

// SetActions sets field value
func (o *AddRuleRequest) SetActions(v []RuleAction) {
	o.Actions = v
}

// GetDataType returns the DataType field value
func (o *AddRuleRequest) GetDataType() DataType {
	if o == nil  {
		var ret DataType
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetDataTypeOk() (*DataType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *AddRuleRequest) SetDataType(v DataType) {
	o.DataType = v
}

// GetFrequency returns the Frequency field value
func (o *AddRuleRequest) GetFrequency() Frequency {
	if o == nil  {
		var ret Frequency
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetFrequencyOk() (*Frequency, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *AddRuleRequest) SetFrequency(v Frequency) {
	o.Frequency = v
}

// GetQueries returns the Queries field value
func (o *AddRuleRequest) GetQueries() []Query {
	if o == nil  {
		var ret []Query
		return ret
	}

	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetQueriesOk() (*[]Query, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Queries, true
}

// SetQueries sets field value
func (o *AddRuleRequest) SetQueries(v []Query) {
	o.Queries = v
}

// GetSelectors returns the Selectors field value if set, zero value otherwise.
func (o *AddRuleRequest) GetSelectors() Selector {
	if o == nil || o.Selectors == nil {
		var ret Selector
		return ret
	}
	return *o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetSelectorsOk() (*Selector, bool) {
	if o == nil || o.Selectors == nil {
		return nil, false
	}
	return o.Selectors, true
}

// HasSelectors returns a boolean if a field has been set.
func (o *AddRuleRequest) HasSelectors() bool {
	if o != nil && o.Selectors != nil {
		return true
	}

	return false
}

// SetSelectors gets a reference to the given Selector and assigns it to the Selectors field.
func (o *AddRuleRequest) SetSelectors(v Selector) {
	o.Selectors = &v
}

// GetTriggerAfter returns the TriggerAfter field value
func (o *AddRuleRequest) GetTriggerAfter() TriggerAfter {
	if o == nil  {
		var ret TriggerAfter
		return ret
	}

	return o.TriggerAfter
}

// GetTriggerAfterOk returns a tuple with the TriggerAfter field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetTriggerAfterOk() (*TriggerAfter, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TriggerAfter, true
}

// SetTriggerAfter sets field value
func (o *AddRuleRequest) SetTriggerAfter(v TriggerAfter) {
	o.TriggerAfter = v
}

// GetWindow returns the Window field value
func (o *AddRuleRequest) GetWindow() Window {
	if o == nil  {
		var ret Window
		return ret
	}

	return o.Window
}

// GetWindowOk returns a tuple with the Window field value
// and a boolean to check if the value has been set.
func (o *AddRuleRequest) GetWindowOk() (*Window, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Window, true
}

// SetWindow sets field value
func (o *AddRuleRequest) SetWindow(v Window) {
	o.Window = v
}

func (o AddRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["actions"] = o.Actions
	}
	if true {
		toSerialize["data_type"] = o.DataType
	}
	if true {
		toSerialize["frequency"] = o.Frequency
	}
	if true {
		toSerialize["queries"] = o.Queries
	}
	if o.Selectors != nil {
		toSerialize["selectors"] = o.Selectors
	}
	if true {
		toSerialize["trigger_after"] = o.TriggerAfter
	}
	if true {
		toSerialize["window"] = o.Window
	}
	return json.Marshal(toSerialize)
}

type NullableAddRuleRequest struct {
	value *AddRuleRequest
	isSet bool
}

func (v NullableAddRuleRequest) Get() *AddRuleRequest {
	return v.value
}

func (v *NullableAddRuleRequest) Set(val *AddRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddRuleRequest(val *AddRuleRequest) *NullableAddRuleRequest {
	return &NullableAddRuleRequest{value: val, isSet: true}
}

func (v NullableAddRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


