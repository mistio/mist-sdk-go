/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// WhenAllOf struct for WhenAllOf
type WhenAllOf struct {
	ScheduleType *string `json:"schedule_type,omitempty"`
}

// NewWhenAllOf instantiates a new WhenAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhenAllOf() *WhenAllOf {
	this := WhenAllOf{}
	return &this
}

// NewWhenAllOfWithDefaults instantiates a new WhenAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhenAllOfWithDefaults() *WhenAllOf {
	this := WhenAllOf{}
	return &this
}

// GetScheduleType returns the ScheduleType field value if set, zero value otherwise.
func (o *WhenAllOf) GetScheduleType() string {
	if o == nil || o.ScheduleType == nil {
		var ret string
		return ret
	}
	return *o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhenAllOf) GetScheduleTypeOk() (*string, bool) {
	if o == nil || o.ScheduleType == nil {
		return nil, false
	}
	return o.ScheduleType, true
}

// HasScheduleType returns a boolean if a field has been set.
func (o *WhenAllOf) HasScheduleType() bool {
	if o != nil && o.ScheduleType != nil {
		return true
	}

	return false
}

// SetScheduleType gets a reference to the given string and assigns it to the ScheduleType field.
func (o *WhenAllOf) SetScheduleType(v string) {
	o.ScheduleType = &v
}

func (o WhenAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScheduleType != nil {
		toSerialize["schedule_type"] = o.ScheduleType
	}
	return json.Marshal(toSerialize)
}

type NullableWhenAllOf struct {
	value *WhenAllOf
	isSet bool
}

func (v NullableWhenAllOf) Get() *WhenAllOf {
	return v.value
}

func (v *NullableWhenAllOf) Set(val *WhenAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableWhenAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableWhenAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhenAllOf(val *WhenAllOf) *NullableWhenAllOf {
	return &NullableWhenAllOf{value: val, isSet: true}
}

func (v NullableWhenAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhenAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


