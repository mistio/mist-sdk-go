/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// ScriptToRun struct for ScriptToRun
type ScriptToRun struct {
	// the script's type: inline, existing 
	Type string `json:"type"`
	Inline string `json:"inline"`
	// the Id of the existing script to be executed 
	ScriptId string `json:"scriptId"`
}

// NewScriptToRun instantiates a new ScriptToRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptToRun(type_ string, inline string, scriptId string) *ScriptToRun {
	this := ScriptToRun{}
	this.Type = type_
	this.Inline = inline
	this.ScriptId = scriptId
	return &this
}

// NewScriptToRunWithDefaults instantiates a new ScriptToRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptToRunWithDefaults() *ScriptToRun {
	this := ScriptToRun{}
	return &this
}

// GetType returns the Type field value
func (o *ScriptToRun) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ScriptToRun) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ScriptToRun) SetType(v string) {
	o.Type = v
}

// GetInline returns the Inline field value
func (o *ScriptToRun) GetInline() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Inline
}

// GetInlineOk returns a tuple with the Inline field value
// and a boolean to check if the value has been set.
func (o *ScriptToRun) GetInlineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inline, true
}

// SetInline sets field value
func (o *ScriptToRun) SetInline(v string) {
	o.Inline = v
}

// GetScriptId returns the ScriptId field value
func (o *ScriptToRun) GetScriptId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScriptId
}

// GetScriptIdOk returns a tuple with the ScriptId field value
// and a boolean to check if the value has been set.
func (o *ScriptToRun) GetScriptIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScriptId, true
}

// SetScriptId sets field value
func (o *ScriptToRun) SetScriptId(v string) {
	o.ScriptId = v
}

func (o ScriptToRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["inline"] = o.Inline
	}
	if true {
		toSerialize["scriptId"] = o.ScriptId
	}
	return json.Marshal(toSerialize)
}

type NullableScriptToRun struct {
	value *ScriptToRun
	isSet bool
}

func (v NullableScriptToRun) Get() *ScriptToRun {
	return v.value
}

func (v *NullableScriptToRun) Set(val *ScriptToRun) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptToRun) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptToRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptToRun(val *ScriptToRun) *NullableScriptToRun {
	return &NullableScriptToRun{value: val, isSet: true}
}

func (v NullableScriptToRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptToRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


