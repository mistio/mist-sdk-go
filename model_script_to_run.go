/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"fmt"
)

// ScriptToRun - struct for ScriptToRun
type ScriptToRun struct {
	RunCommand *RunCommand
	RunExistingScript *RunExistingScript
}

// RunCommandAsScriptToRun is a convenience function that returns RunCommand wrapped in ScriptToRun
func RunCommandAsScriptToRun(v *RunCommand) ScriptToRun {
	return ScriptToRun{
		RunCommand: v,
	}
}

// RunExistingScriptAsScriptToRun is a convenience function that returns RunExistingScript wrapped in ScriptToRun
func RunExistingScriptAsScriptToRun(v *RunExistingScript) ScriptToRun {
	return ScriptToRun{
		RunExistingScript: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScriptToRun) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RunCommand
	err = newStrictDecoder(data).Decode(&dst.RunCommand)
	if err == nil {
		jsonRunCommand, _ := json.Marshal(dst.RunCommand)
		if string(jsonRunCommand) == "{}" { // empty struct
			dst.RunCommand = nil
		} else {
			match++
		}
	} else {
		dst.RunCommand = nil
	}

	// try to unmarshal data into RunExistingScript
	err = newStrictDecoder(data).Decode(&dst.RunExistingScript)
	if err == nil {
		jsonRunExistingScript, _ := json.Marshal(dst.RunExistingScript)
		if string(jsonRunExistingScript) == "{}" { // empty struct
			dst.RunExistingScript = nil
		} else {
			match++
		}
	} else {
		dst.RunExistingScript = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RunCommand = nil
		dst.RunExistingScript = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ScriptToRun)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ScriptToRun)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScriptToRun) MarshalJSON() ([]byte, error) {
	if src.RunCommand != nil {
		return json.Marshal(&src.RunCommand)
	}

	if src.RunExistingScript != nil {
		return json.Marshal(&src.RunExistingScript)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScriptToRun) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RunCommand != nil {
		return obj.RunCommand
	}

	if obj.RunExistingScript != nil {
		return obj.RunExistingScript
	}

	// all schemas are nil
	return nil
}

type NullableScriptToRun struct {
	value *ScriptToRun
	isSet bool
}

func (v NullableScriptToRun) Get() *ScriptToRun {
	return v.value
}

func (v *NullableScriptToRun) Set(val *ScriptToRun) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptToRun) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptToRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptToRun(val *ScriptToRun) *NullableScriptToRun {
	return &NullableScriptToRun{value: val, isSet: true}
}

func (v NullableScriptToRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptToRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


