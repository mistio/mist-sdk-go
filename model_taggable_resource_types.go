/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"fmt"
)

// TaggableResourceTypes the model 'TaggableResourceTypes'
type TaggableResourceTypes string

// List of TaggableResourceTypes
const (
	BUCKETS TaggableResourceTypes = "buckets"
	CLOUDS TaggableResourceTypes = "clouds"
	CLUSTERS TaggableResourceTypes = "clusters"
	IMAGES TaggableResourceTypes = "images"
	KEYS TaggableResourceTypes = "keys"
	MACHINES TaggableResourceTypes = "machines"
	NETWORKS TaggableResourceTypes = "networks"
	RECORDS TaggableResourceTypes = "records"
	SCHEDULES TaggableResourceTypes = "schedules"
	SCRIPTS TaggableResourceTypes = "scripts"
	STACKS TaggableResourceTypes = "stacks"
	SUBNETS TaggableResourceTypes = "subnets"
	TEMPLATES TaggableResourceTypes = "templates"
	TUNNELS TaggableResourceTypes = "tunnels"
	VOLUMES TaggableResourceTypes = "volumes"
	ZONES TaggableResourceTypes = "zones"
)

// All allowed values of TaggableResourceTypes enum
var AllowedTaggableResourceTypesEnumValues = []TaggableResourceTypes{
	"buckets",
	"clouds",
	"clusters",
	"images",
	"keys",
	"machines",
	"networks",
	"records",
	"schedules",
	"scripts",
	"stacks",
	"subnets",
	"templates",
	"tunnels",
	"volumes",
	"zones",
}

func (v *TaggableResourceTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaggableResourceTypes(value)
	for _, existing := range AllowedTaggableResourceTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaggableResourceTypes", value)
}

// NewTaggableResourceTypesFromValue returns a pointer to a valid TaggableResourceTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaggableResourceTypesFromValue(v string) (*TaggableResourceTypes, error) {
	ev := TaggableResourceTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaggableResourceTypes: valid values are %v", v, AllowedTaggableResourceTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaggableResourceTypes) IsValid() bool {
	for _, existing := range AllowedTaggableResourceTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaggableResourceTypes value
func (v TaggableResourceTypes) Ptr() *TaggableResourceTypes {
	return &v
}

type NullableTaggableResourceTypes struct {
	value *TaggableResourceTypes
	isSet bool
}

func (v NullableTaggableResourceTypes) Get() *TaggableResourceTypes {
	return v.value
}

func (v *NullableTaggableResourceTypes) Set(val *TaggableResourceTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableTaggableResourceTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableTaggableResourceTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaggableResourceTypes(val *TaggableResourceTypes) *NullableTaggableResourceTypes {
	return &NullableTaggableResourceTypes{value: val, isSet: true}
}

func (v NullableTaggableResourceTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaggableResourceTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

