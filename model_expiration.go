/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"time"
)

// Expiration struct for Expiration
type Expiration struct {
	Action string `json:"action"`
	// When machine should expire, e.g 2021-09-22T18:19:28Z
	Date time.Time `json:"date"`
	Notify *ExpirationNotify `json:"notify,omitempty"`
	NotifyMsg *string `json:"notify_msg,omitempty"`
}

// NewExpiration instantiates a new Expiration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpiration(action string, date time.Time) *Expiration {
	this := Expiration{}
	this.Action = action
	this.Date = date
	return &this
}

// NewExpirationWithDefaults instantiates a new Expiration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpirationWithDefaults() *Expiration {
	this := Expiration{}
	return &this
}

// GetAction returns the Action field value
func (o *Expiration) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *Expiration) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *Expiration) SetAction(v string) {
	o.Action = v
}

// GetDate returns the Date field value
func (o *Expiration) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Expiration) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Expiration) SetDate(v time.Time) {
	o.Date = v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *Expiration) GetNotify() ExpirationNotify {
	if o == nil || o.Notify == nil {
		var ret ExpirationNotify
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expiration) GetNotifyOk() (*ExpirationNotify, bool) {
	if o == nil || o.Notify == nil {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *Expiration) HasNotify() bool {
	if o != nil && o.Notify != nil {
		return true
	}

	return false
}

// SetNotify gets a reference to the given ExpirationNotify and assigns it to the Notify field.
func (o *Expiration) SetNotify(v ExpirationNotify) {
	o.Notify = &v
}

// GetNotifyMsg returns the NotifyMsg field value if set, zero value otherwise.
func (o *Expiration) GetNotifyMsg() string {
	if o == nil || o.NotifyMsg == nil {
		var ret string
		return ret
	}
	return *o.NotifyMsg
}

// GetNotifyMsgOk returns a tuple with the NotifyMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expiration) GetNotifyMsgOk() (*string, bool) {
	if o == nil || o.NotifyMsg == nil {
		return nil, false
	}
	return o.NotifyMsg, true
}

// HasNotifyMsg returns a boolean if a field has been set.
func (o *Expiration) HasNotifyMsg() bool {
	if o != nil && o.NotifyMsg != nil {
		return true
	}

	return false
}

// SetNotifyMsg gets a reference to the given string and assigns it to the NotifyMsg field.
func (o *Expiration) SetNotifyMsg(v string) {
	o.NotifyMsg = &v
}

func (o Expiration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if o.Notify != nil {
		toSerialize["notify"] = o.Notify
	}
	if o.NotifyMsg != nil {
		toSerialize["notify_msg"] = o.NotifyMsg
	}
	return json.Marshal(toSerialize)
}

type NullableExpiration struct {
	value *Expiration
	isSet bool
}

func (v NullableExpiration) Get() *Expiration {
	return v.value
}

func (v *NullableExpiration) Set(val *Expiration) {
	v.value = val
	v.isSet = true
}

func (v NullableExpiration) IsSet() bool {
	return v.isSet
}

func (v *NullableExpiration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpiration(val *Expiration) *NullableExpiration {
	return &NullableExpiration{value: val, isSet: true}
}

func (v NullableExpiration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpiration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


