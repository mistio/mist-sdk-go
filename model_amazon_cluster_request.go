/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AmazonClusterRequest struct for AmazonClusterRequest
type AmazonClusterRequest struct {
	// The Amazon Resource Name (ARN) of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf
	RoleArn string `json:"role_arn"`
	// Name or ID of the network to be associated with the cluster. If not given the default network will be selected
	Network *string `json:"network,omitempty"`
	// IDs of the subnets to be associated with the cluster. At least 2 subnets in different availability zones are required, if not given the default subnets will be used
	Subnets *[]string `json:"subnets,omitempty"`
	// The security groups associated with the cross-account elastic network interfaces that are used to allow communication between your nodes and the Kubernetes control plane
	SecurityGroups *[]string `json:"security_groups,omitempty"`
}

// NewAmazonClusterRequest instantiates a new AmazonClusterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonClusterRequest(roleArn string, ) *AmazonClusterRequest {
	this := AmazonClusterRequest{}
	this.RoleArn = roleArn
	return &this
}

// NewAmazonClusterRequestWithDefaults instantiates a new AmazonClusterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonClusterRequestWithDefaults() *AmazonClusterRequest {
	this := AmazonClusterRequest{}
	return &this
}

// GetRoleArn returns the RoleArn field value
func (o *AmazonClusterRequest) GetRoleArn() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value
// and a boolean to check if the value has been set.
func (o *AmazonClusterRequest) GetRoleArnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RoleArn, true
}

// SetRoleArn sets field value
func (o *AmazonClusterRequest) SetRoleArn(v string) {
	o.RoleArn = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *AmazonClusterRequest) GetNetwork() string {
	if o == nil || o.Network == nil {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonClusterRequest) GetNetworkOk() (*string, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *AmazonClusterRequest) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *AmazonClusterRequest) SetNetwork(v string) {
	o.Network = &v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *AmazonClusterRequest) GetSubnets() []string {
	if o == nil || o.Subnets == nil {
		var ret []string
		return ret
	}
	return *o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonClusterRequest) GetSubnetsOk() (*[]string, bool) {
	if o == nil || o.Subnets == nil {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *AmazonClusterRequest) HasSubnets() bool {
	if o != nil && o.Subnets != nil {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *AmazonClusterRequest) SetSubnets(v []string) {
	o.Subnets = &v
}

// GetSecurityGroups returns the SecurityGroups field value if set, zero value otherwise.
func (o *AmazonClusterRequest) GetSecurityGroups() []string {
	if o == nil || o.SecurityGroups == nil {
		var ret []string
		return ret
	}
	return *o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonClusterRequest) GetSecurityGroupsOk() (*[]string, bool) {
	if o == nil || o.SecurityGroups == nil {
		return nil, false
	}
	return o.SecurityGroups, true
}

// HasSecurityGroups returns a boolean if a field has been set.
func (o *AmazonClusterRequest) HasSecurityGroups() bool {
	if o != nil && o.SecurityGroups != nil {
		return true
	}

	return false
}

// SetSecurityGroups gets a reference to the given []string and assigns it to the SecurityGroups field.
func (o *AmazonClusterRequest) SetSecurityGroups(v []string) {
	o.SecurityGroups = &v
}

func (o AmazonClusterRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["role_arn"] = o.RoleArn
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	if o.Subnets != nil {
		toSerialize["subnets"] = o.Subnets
	}
	if o.SecurityGroups != nil {
		toSerialize["security_groups"] = o.SecurityGroups
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonClusterRequest struct {
	value *AmazonClusterRequest
	isSet bool
}

func (v NullableAmazonClusterRequest) Get() *AmazonClusterRequest {
	return v.value
}

func (v *NullableAmazonClusterRequest) Set(val *AmazonClusterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonClusterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonClusterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonClusterRequest(val *AmazonClusterRequest) *NullableAmazonClusterRequest {
	return &NullableAmazonClusterRequest{value: val, isSet: true}
}

func (v NullableAmazonClusterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonClusterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


