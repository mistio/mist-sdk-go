/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// DestroyAction struct for DestroyAction
type DestroyAction struct {
	ActionType *string `json:"action_type,omitempty"`
}

// NewDestroyAction instantiates a new DestroyAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestroyAction() *DestroyAction {
	this := DestroyAction{}
	return &this
}

// NewDestroyActionWithDefaults instantiates a new DestroyAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestroyActionWithDefaults() *DestroyAction {
	this := DestroyAction{}
	return &this
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *DestroyAction) GetActionType() string {
	if o == nil || o.ActionType == nil {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestroyAction) GetActionTypeOk() (*string, bool) {
	if o == nil || o.ActionType == nil {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *DestroyAction) HasActionType() bool {
	if o != nil && o.ActionType != nil {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *DestroyAction) SetActionType(v string) {
	o.ActionType = &v
}

func (o DestroyAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActionType != nil {
		toSerialize["action_type"] = o.ActionType
	}
	return json.Marshal(toSerialize)
}

type NullableDestroyAction struct {
	value *DestroyAction
	isSet bool
}

func (v NullableDestroyAction) Get() *DestroyAction {
	return v.value
}

func (v *NullableDestroyAction) Set(val *DestroyAction) {
	v.value = val
	v.isSet = true
}

func (v NullableDestroyAction) IsSet() bool {
	return v.isSet
}

func (v *NullableDestroyAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestroyAction(val *DestroyAction) *NullableDestroyAction {
	return &NullableDestroyAction{value: val, isSet: true}
}

func (v NullableDestroyAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestroyAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


