/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AppRoleAuth struct for AppRoleAuth
type AppRoleAuth struct {
	// The Vault RoleID to use for approle authentication. Either token or both role_id and secret_id must be specified
	RoleId *string `json:"role_id,omitempty"`
	// The Vault SecretID to use for approle authentication. Either token or both role_id and secret_id must be specified
	SecretId *string `json:"secret_id,omitempty"`
}

// NewAppRoleAuth instantiates a new AppRoleAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppRoleAuth() *AppRoleAuth {
	this := AppRoleAuth{}
	return &this
}

// NewAppRoleAuthWithDefaults instantiates a new AppRoleAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppRoleAuthWithDefaults() *AppRoleAuth {
	this := AppRoleAuth{}
	return &this
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *AppRoleAuth) GetRoleId() string {
	if o == nil || o.RoleId == nil {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRoleAuth) GetRoleIdOk() (*string, bool) {
	if o == nil || o.RoleId == nil {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *AppRoleAuth) HasRoleId() bool {
	if o != nil && o.RoleId != nil {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *AppRoleAuth) SetRoleId(v string) {
	o.RoleId = &v
}

// GetSecretId returns the SecretId field value if set, zero value otherwise.
func (o *AppRoleAuth) GetSecretId() string {
	if o == nil || o.SecretId == nil {
		var ret string
		return ret
	}
	return *o.SecretId
}

// GetSecretIdOk returns a tuple with the SecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRoleAuth) GetSecretIdOk() (*string, bool) {
	if o == nil || o.SecretId == nil {
		return nil, false
	}
	return o.SecretId, true
}

// HasSecretId returns a boolean if a field has been set.
func (o *AppRoleAuth) HasSecretId() bool {
	if o != nil && o.SecretId != nil {
		return true
	}

	return false
}

// SetSecretId gets a reference to the given string and assigns it to the SecretId field.
func (o *AppRoleAuth) SetSecretId(v string) {
	o.SecretId = &v
}

func (o AppRoleAuth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RoleId != nil {
		toSerialize["role_id"] = o.RoleId
	}
	if o.SecretId != nil {
		toSerialize["secret_id"] = o.SecretId
	}
	return json.Marshal(toSerialize)
}

type NullableAppRoleAuth struct {
	value *AppRoleAuth
	isSet bool
}

func (v NullableAppRoleAuth) Get() *AppRoleAuth {
	return v.value
}

func (v *NullableAppRoleAuth) Set(val *AppRoleAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRoleAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRoleAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRoleAuth(val *AppRoleAuth) *NullableAppRoleAuth {
	return &NullableAppRoleAuth{value: val, isSet: true}
}

func (v NullableAppRoleAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRoleAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


