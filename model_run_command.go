/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// RunCommand struct for RunCommand
type RunCommand struct {
	ScriptType *string `json:"script_type,omitempty"`
	// Command that is about to run
	Command string `json:"command"`
}

// NewRunCommand instantiates a new RunCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunCommand(command string) *RunCommand {
	this := RunCommand{}
	this.Command = command
	return &this
}

// NewRunCommandWithDefaults instantiates a new RunCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunCommandWithDefaults() *RunCommand {
	this := RunCommand{}
	return &this
}

// GetScriptType returns the ScriptType field value if set, zero value otherwise.
func (o *RunCommand) GetScriptType() string {
	if o == nil || o.ScriptType == nil {
		var ret string
		return ret
	}
	return *o.ScriptType
}

// GetScriptTypeOk returns a tuple with the ScriptType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunCommand) GetScriptTypeOk() (*string, bool) {
	if o == nil || o.ScriptType == nil {
		return nil, false
	}
	return o.ScriptType, true
}

// HasScriptType returns a boolean if a field has been set.
func (o *RunCommand) HasScriptType() bool {
	if o != nil && o.ScriptType != nil {
		return true
	}

	return false
}

// SetScriptType gets a reference to the given string and assigns it to the ScriptType field.
func (o *RunCommand) SetScriptType(v string) {
	o.ScriptType = &v
}

// GetCommand returns the Command field value
func (o *RunCommand) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *RunCommand) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *RunCommand) SetCommand(v string) {
	o.Command = v
}

func (o RunCommand) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScriptType != nil {
		toSerialize["script_type"] = o.ScriptType
	}
	if true {
		toSerialize["command"] = o.Command
	}
	return json.Marshal(toSerialize)
}

type NullableRunCommand struct {
	value *RunCommand
	isSet bool
}

func (v NullableRunCommand) Get() *RunCommand {
	return v.value
}

func (v *NullableRunCommand) Set(val *RunCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableRunCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableRunCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunCommand(val *RunCommand) *NullableRunCommand {
	return &NullableRunCommand{value: val, isSet: true}
}

func (v NullableRunCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


