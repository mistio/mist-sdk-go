/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AzureSubnetRequest struct for AzureSubnetRequest
type AzureSubnetRequest struct {
	Provider string `json:"provider"`
}

// NewAzureSubnetRequest instantiates a new AzureSubnetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureSubnetRequest(provider string, ) *AzureSubnetRequest {
	this := AzureSubnetRequest{}
	this.Provider = provider
	return &this
}

// NewAzureSubnetRequestWithDefaults instantiates a new AzureSubnetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureSubnetRequestWithDefaults() *AzureSubnetRequest {
	this := AzureSubnetRequest{}
	return &this
}

// GetProvider returns the Provider field value
func (o *AzureSubnetRequest) GetProvider() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *AzureSubnetRequest) GetProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *AzureSubnetRequest) SetProvider(v string) {
	o.Provider = v
}

func (o AzureSubnetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["provider"] = o.Provider
	}
	return json.Marshal(toSerialize)
}

type NullableAzureSubnetRequest struct {
	value *AzureSubnetRequest
	isSet bool
}

func (v NullableAzureSubnetRequest) Get() *AzureSubnetRequest {
	return v.value
}

func (v *NullableAzureSubnetRequest) Set(val *AzureSubnetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureSubnetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureSubnetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureSubnetRequest(val *AzureSubnetRequest) *NullableAzureSubnetRequest {
	return &NullableAzureSubnetRequest{value: val, isSet: true}
}

func (v NullableAzureSubnetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureSubnetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


