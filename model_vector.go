/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"fmt"
)

// Vector - struct for Vector
type Vector struct {
	InstantVector *InstantVector
	RangeVector *RangeVector
}

// InstantVectorAsVector is a convenience function that returns InstantVector wrapped in Vector
func InstantVectorAsVector(v *InstantVector) Vector {
	return Vector{
		InstantVector: v,
	}
}

// RangeVectorAsVector is a convenience function that returns RangeVector wrapped in Vector
func RangeVectorAsVector(v *RangeVector) Vector {
	return Vector{
		RangeVector: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Vector) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InstantVector
	err = newStrictDecoder(data).Decode(&dst.InstantVector)
	if err == nil {
		jsonInstantVector, _ := json.Marshal(dst.InstantVector)
		if string(jsonInstantVector) == "{}" { // empty struct
			dst.InstantVector = nil
		} else {
			match++
		}
	} else {
		dst.InstantVector = nil
	}

	// try to unmarshal data into RangeVector
	err = newStrictDecoder(data).Decode(&dst.RangeVector)
	if err == nil {
		jsonRangeVector, _ := json.Marshal(dst.RangeVector)
		if string(jsonRangeVector) == "{}" { // empty struct
			dst.RangeVector = nil
		} else {
			match++
		}
	} else {
		dst.RangeVector = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InstantVector = nil
		dst.RangeVector = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Vector)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Vector)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Vector) MarshalJSON() ([]byte, error) {
	if src.InstantVector != nil {
		return json.Marshal(&src.InstantVector)
	}

	if src.RangeVector != nil {
		return json.Marshal(&src.RangeVector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Vector) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InstantVector != nil {
		return obj.InstantVector
	}

	if obj.RangeVector != nil {
		return obj.RangeVector
	}

	// all schemas are nil
	return nil
}

type NullableVector struct {
	value *Vector
	isSet bool
}

func (v NullableVector) Get() *Vector {
	return v.value
}

func (v *NullableVector) Set(val *Vector) {
	v.value = val
	v.isSet = true
}

func (v NullableVector) IsSet() bool {
	return v.isSet
}

func (v *NullableVector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVector(val *Vector) *NullableVector {
	return &NullableVector{value: val, isSet: true}
}

func (v NullableVector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


