/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// GetRuleResponse struct for GetRuleResponse
type GetRuleResponse struct {
	Data *Rule `json:"data,omitempty"`
	Meta *ResponseMetadata `json:"meta,omitempty"`
}

// NewGetRuleResponse instantiates a new GetRuleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRuleResponse() *GetRuleResponse {
	this := GetRuleResponse{}
	return &this
}

// NewGetRuleResponseWithDefaults instantiates a new GetRuleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRuleResponseWithDefaults() *GetRuleResponse {
	this := GetRuleResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetRuleResponse) GetData() Rule {
	if o == nil || o.Data == nil {
		var ret Rule
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRuleResponse) GetDataOk() (*Rule, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetRuleResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given Rule and assigns it to the Data field.
func (o *GetRuleResponse) SetData(v Rule) {
	o.Data = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *GetRuleResponse) GetMeta() ResponseMetadata {
	if o == nil || o.Meta == nil {
		var ret ResponseMetadata
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRuleResponse) GetMetaOk() (*ResponseMetadata, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *GetRuleResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ResponseMetadata and assigns it to the Meta field.
func (o *GetRuleResponse) SetMeta(v ResponseMetadata) {
	o.Meta = &v
}

func (o GetRuleResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableGetRuleResponse struct {
	value *GetRuleResponse
	isSet bool
}

func (v NullableGetRuleResponse) Get() *GetRuleResponse {
	return v.value
}

func (v *NullableGetRuleResponse) Set(val *GetRuleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRuleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRuleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRuleResponse(val *GetRuleResponse) *NullableGetRuleResponse {
	return &NullableGetRuleResponse{value: val, isSet: true}
}

func (v NullableGetRuleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRuleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


