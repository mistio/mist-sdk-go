/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// DockerExtra struct for DockerExtra
type DockerExtra struct {
	// Key, value pairs of environment variables to set inside the container
	Environment *map[string]interface{} `json:"environment,omitempty"`
	// Command to run specified as a string
	Command *string `json:"command,omitempty"`
	Limits *DockerExtraLimits `json:"limits,omitempty"`
}

// NewDockerExtra instantiates a new DockerExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerExtra() *DockerExtra {
	this := DockerExtra{}
	return &this
}

// NewDockerExtraWithDefaults instantiates a new DockerExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerExtraWithDefaults() *DockerExtra {
	this := DockerExtra{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *DockerExtra) GetEnvironment() map[string]interface{} {
	if o == nil || o.Environment == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerExtra) GetEnvironmentOk() (*map[string]interface{}, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *DockerExtra) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given map[string]interface{} and assigns it to the Environment field.
func (o *DockerExtra) SetEnvironment(v map[string]interface{}) {
	o.Environment = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *DockerExtra) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerExtra) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *DockerExtra) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *DockerExtra) SetCommand(v string) {
	o.Command = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *DockerExtra) GetLimits() DockerExtraLimits {
	if o == nil || o.Limits == nil {
		var ret DockerExtraLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerExtra) GetLimitsOk() (*DockerExtraLimits, bool) {
	if o == nil || o.Limits == nil {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *DockerExtra) HasLimits() bool {
	if o != nil && o.Limits != nil {
		return true
	}

	return false
}

// SetLimits gets a reference to the given DockerExtraLimits and assigns it to the Limits field.
func (o *DockerExtra) SetLimits(v DockerExtraLimits) {
	o.Limits = &v
}

func (o DockerExtra) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.Limits != nil {
		toSerialize["limits"] = o.Limits
	}
	return json.Marshal(toSerialize)
}

type NullableDockerExtra struct {
	value *DockerExtra
	isSet bool
}

func (v NullableDockerExtra) Get() *DockerExtra {
	return v.value
}

func (v *NullableDockerExtra) Set(val *DockerExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerExtra(val *DockerExtra) *NullableDockerExtra {
	return &NullableDockerExtra{value: val, isSet: true}
}

func (v NullableDockerExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


