/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AuthInfoData struct for AuthInfoData
type AuthInfoData struct {
	User *User `json:"user,omitempty"`
	// Orgs available in current authenticated session
	Orgs []Org `json:"orgs,omitempty"`
}

// NewAuthInfoData instantiates a new AuthInfoData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthInfoData() *AuthInfoData {
	this := AuthInfoData{}
	return &this
}

// NewAuthInfoDataWithDefaults instantiates a new AuthInfoData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthInfoDataWithDefaults() *AuthInfoData {
	this := AuthInfoData{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AuthInfoData) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthInfoData) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AuthInfoData) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *AuthInfoData) SetUser(v User) {
	o.User = &v
}

// GetOrgs returns the Orgs field value if set, zero value otherwise.
func (o *AuthInfoData) GetOrgs() []Org {
	if o == nil || o.Orgs == nil {
		var ret []Org
		return ret
	}
	return o.Orgs
}

// GetOrgsOk returns a tuple with the Orgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthInfoData) GetOrgsOk() ([]Org, bool) {
	if o == nil || o.Orgs == nil {
		return nil, false
	}
	return o.Orgs, true
}

// HasOrgs returns a boolean if a field has been set.
func (o *AuthInfoData) HasOrgs() bool {
	if o != nil && o.Orgs != nil {
		return true
	}

	return false
}

// SetOrgs gets a reference to the given []Org and assigns it to the Orgs field.
func (o *AuthInfoData) SetOrgs(v []Org) {
	o.Orgs = v
}

func (o AuthInfoData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Orgs != nil {
		toSerialize["orgs"] = o.Orgs
	}
	return json.Marshal(toSerialize)
}

type NullableAuthInfoData struct {
	value *AuthInfoData
	isSet bool
}

func (v NullableAuthInfoData) Get() *AuthInfoData {
	return v.value
}

func (v *NullableAuthInfoData) Set(val *AuthInfoData) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthInfoData) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthInfoData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthInfoData(val *AuthInfoData) *NullableAuthInfoData {
	return &NullableAuthInfoData{value: val, isSet: true}
}

func (v NullableAuthInfoData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthInfoData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


