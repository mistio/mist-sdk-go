/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// VultrExtra struct for VultrExtra
type VultrExtra struct {
	// Enable automatic backups for the machine, invalid for \"Bare Metal\" & \"Dedicated Cloud\" size types. There is an additional charge depending on the size selected
	Backups *bool `json:"backups,omitempty"`
	// Enable DDoS protection, invalid for \"Bare Metal\" size type. There is an additional charge depending on the type of the size selected
	DdosProtection *bool `json:"ddos_protection,omitempty"`
}

// NewVultrExtra instantiates a new VultrExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVultrExtra() *VultrExtra {
	this := VultrExtra{}
	return &this
}

// NewVultrExtraWithDefaults instantiates a new VultrExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVultrExtraWithDefaults() *VultrExtra {
	this := VultrExtra{}
	return &this
}

// GetBackups returns the Backups field value if set, zero value otherwise.
func (o *VultrExtra) GetBackups() bool {
	if o == nil || o.Backups == nil {
		var ret bool
		return ret
	}
	return *o.Backups
}

// GetBackupsOk returns a tuple with the Backups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VultrExtra) GetBackupsOk() (*bool, bool) {
	if o == nil || o.Backups == nil {
		return nil, false
	}
	return o.Backups, true
}

// HasBackups returns a boolean if a field has been set.
func (o *VultrExtra) HasBackups() bool {
	if o != nil && o.Backups != nil {
		return true
	}

	return false
}

// SetBackups gets a reference to the given bool and assigns it to the Backups field.
func (o *VultrExtra) SetBackups(v bool) {
	o.Backups = &v
}

// GetDdosProtection returns the DdosProtection field value if set, zero value otherwise.
func (o *VultrExtra) GetDdosProtection() bool {
	if o == nil || o.DdosProtection == nil {
		var ret bool
		return ret
	}
	return *o.DdosProtection
}

// GetDdosProtectionOk returns a tuple with the DdosProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VultrExtra) GetDdosProtectionOk() (*bool, bool) {
	if o == nil || o.DdosProtection == nil {
		return nil, false
	}
	return o.DdosProtection, true
}

// HasDdosProtection returns a boolean if a field has been set.
func (o *VultrExtra) HasDdosProtection() bool {
	if o != nil && o.DdosProtection != nil {
		return true
	}

	return false
}

// SetDdosProtection gets a reference to the given bool and assigns it to the DdosProtection field.
func (o *VultrExtra) SetDdosProtection(v bool) {
	o.DdosProtection = &v
}

func (o VultrExtra) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Backups != nil {
		toSerialize["backups"] = o.Backups
	}
	if o.DdosProtection != nil {
		toSerialize["ddos_protection"] = o.DdosProtection
	}
	return json.Marshal(toSerialize)
}

type NullableVultrExtra struct {
	value *VultrExtra
	isSet bool
}

func (v NullableVultrExtra) Get() *VultrExtra {
	return v.value
}

func (v *NullableVultrExtra) Set(val *VultrExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableVultrExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableVultrExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVultrExtra(val *VultrExtra) *NullableVultrExtra {
	return &NullableVultrExtra{value: val, isSet: true}
}

func (v NullableVultrExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVultrExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


