/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AddKeyRequestAnyOf2 struct for AddKeyRequestAnyOf2
type AddKeyRequestAnyOf2 struct {
	// Generate a keypair instead of providing one
	Generate bool `json:"generate"`
	// Return generated key without actually adding it
	Dry bool `json:"dry"`
}

// NewAddKeyRequestAnyOf2 instantiates a new AddKeyRequestAnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddKeyRequestAnyOf2(generate bool, dry bool) *AddKeyRequestAnyOf2 {
	this := AddKeyRequestAnyOf2{}
	this.Generate = generate
	this.Dry = dry
	return &this
}

// NewAddKeyRequestAnyOf2WithDefaults instantiates a new AddKeyRequestAnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddKeyRequestAnyOf2WithDefaults() *AddKeyRequestAnyOf2 {
	this := AddKeyRequestAnyOf2{}
	return &this
}

// GetGenerate returns the Generate field value
func (o *AddKeyRequestAnyOf2) GetGenerate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Generate
}

// GetGenerateOk returns a tuple with the Generate field value
// and a boolean to check if the value has been set.
func (o *AddKeyRequestAnyOf2) GetGenerateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Generate, true
}

// SetGenerate sets field value
func (o *AddKeyRequestAnyOf2) SetGenerate(v bool) {
	o.Generate = v
}

// GetDry returns the Dry field value
func (o *AddKeyRequestAnyOf2) GetDry() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Dry
}

// GetDryOk returns a tuple with the Dry field value
// and a boolean to check if the value has been set.
func (o *AddKeyRequestAnyOf2) GetDryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dry, true
}

// SetDry sets field value
func (o *AddKeyRequestAnyOf2) SetDry(v bool) {
	o.Dry = v
}

func (o AddKeyRequestAnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["generate"] = o.Generate
	}
	if true {
		toSerialize["dry"] = o.Dry
	}
	return json.Marshal(toSerialize)
}

type NullableAddKeyRequestAnyOf2 struct {
	value *AddKeyRequestAnyOf2
	isSet bool
}

func (v NullableAddKeyRequestAnyOf2) Get() *AddKeyRequestAnyOf2 {
	return v.value
}

func (v *NullableAddKeyRequestAnyOf2) Set(val *AddKeyRequestAnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableAddKeyRequestAnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableAddKeyRequestAnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddKeyRequestAnyOf2(val *AddKeyRequestAnyOf2) *NullableAddKeyRequestAnyOf2 {
	return &NullableAddKeyRequestAnyOf2{value: val, isSet: true}
}

func (v NullableAddKeyRequestAnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddKeyRequestAnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


