/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"fmt"
)

// DataType the model 'DataType'
type DataType string

// List of DataType
const (
	METRICS DataType = "metrics"
	LOGS DataType = "logs"
)

// All allowed values of DataType enum
var AllowedDataTypeEnumValues = []DataType{
	"metrics",
	"logs",
}

func (v *DataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataType(value)
	for _, existing := range AllowedDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataType", value)
}

// NewDataTypeFromValue returns a pointer to a valid DataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataTypeFromValue(v string) (*DataType, error) {
	ev := DataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataType: valid values are %v", v, AllowedDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataType) IsValid() bool {
	for _, existing := range AllowedDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataType value
func (v DataType) Ptr() *DataType {
	return &v
}

type NullableDataType struct {
	value *DataType
	isSet bool
}

func (v NullableDataType) Get() *DataType {
	return v.value
}

func (v *NullableDataType) Set(val *DataType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataType(val *DataType) *NullableDataType {
	return &NullableDataType{value: val, isSet: true}
}

func (v NullableDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

