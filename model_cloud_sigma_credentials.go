/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// CloudSigmaCredentials struct for CloudSigmaCredentials
type CloudSigmaCredentials struct {
	// Your CloudSigma username
	Username string `json:"username"`
	// Your CloudSigma password
	Password string `json:"password"`
	// Your CloudSigma region
	Region string `json:"region"`
}

// NewCloudSigmaCredentials instantiates a new CloudSigmaCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudSigmaCredentials(username string, password string, region string) *CloudSigmaCredentials {
	this := CloudSigmaCredentials{}
	this.Username = username
	this.Password = password
	this.Region = region
	return &this
}

// NewCloudSigmaCredentialsWithDefaults instantiates a new CloudSigmaCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudSigmaCredentialsWithDefaults() *CloudSigmaCredentials {
	this := CloudSigmaCredentials{}
	return &this
}

// GetUsername returns the Username field value
func (o *CloudSigmaCredentials) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CloudSigmaCredentials) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CloudSigmaCredentials) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *CloudSigmaCredentials) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CloudSigmaCredentials) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CloudSigmaCredentials) SetPassword(v string) {
	o.Password = v
}

// GetRegion returns the Region field value
func (o *CloudSigmaCredentials) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CloudSigmaCredentials) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CloudSigmaCredentials) SetRegion(v string) {
	o.Region = v
}

func (o CloudSigmaCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["region"] = o.Region
	}
	return json.Marshal(toSerialize)
}

type NullableCloudSigmaCredentials struct {
	value *CloudSigmaCredentials
	isSet bool
}

func (v NullableCloudSigmaCredentials) Get() *CloudSigmaCredentials {
	return v.value
}

func (v *NullableCloudSigmaCredentials) Set(val *CloudSigmaCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudSigmaCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudSigmaCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudSigmaCredentials(val *CloudSigmaCredentials) *NullableCloudSigmaCredentials {
	return &NullableCloudSigmaCredentials{value: val, isSet: true}
}

func (v NullableCloudSigmaCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudSigmaCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


