/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// GetKeyResponse struct for GetKeyResponse
type GetKeyResponse struct {
	Data *Key `json:"data,omitempty"`
	Meta *ResponseMetadata `json:"meta,omitempty"`
}

// NewGetKeyResponse instantiates a new GetKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetKeyResponse() *GetKeyResponse {
	this := GetKeyResponse{}
	return &this
}

// NewGetKeyResponseWithDefaults instantiates a new GetKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetKeyResponseWithDefaults() *GetKeyResponse {
	this := GetKeyResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetKeyResponse) GetData() Key {
	if o == nil || o.Data == nil {
		var ret Key
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetKeyResponse) GetDataOk() (*Key, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetKeyResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given Key and assigns it to the Data field.
func (o *GetKeyResponse) SetData(v Key) {
	o.Data = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *GetKeyResponse) GetMeta() ResponseMetadata {
	if o == nil || o.Meta == nil {
		var ret ResponseMetadata
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetKeyResponse) GetMetaOk() (*ResponseMetadata, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *GetKeyResponse) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ResponseMetadata and assigns it to the Meta field.
func (o *GetKeyResponse) SetMeta(v ResponseMetadata) {
	o.Meta = &v
}

func (o GetKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableGetKeyResponse struct {
	value *GetKeyResponse
	isSet bool
}

func (v NullableGetKeyResponse) Get() *GetKeyResponse {
	return v.value
}

func (v *NullableGetKeyResponse) Set(val *GetKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetKeyResponse(val *GetKeyResponse) *NullableGetKeyResponse {
	return &NullableGetKeyResponse{value: val, isSet: true}
}

func (v NullableGetKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


