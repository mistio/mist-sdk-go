/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// EditRuleRequest struct for EditRuleRequest
type EditRuleRequest struct {
	Queries []Query `json:"queries,omitempty"`
	Window *Window `json:"window,omitempty"`
	Frequency *Frequency `json:"frequency,omitempty"`
	TriggerAfter *TriggerAfter `json:"trigger_after,omitempty"`
	Actions []RuleAction `json:"actions,omitempty"`
	Selectors *Selector `json:"selectors,omitempty"`
}

// NewEditRuleRequest instantiates a new EditRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditRuleRequest() *EditRuleRequest {
	this := EditRuleRequest{}
	return &this
}

// NewEditRuleRequestWithDefaults instantiates a new EditRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditRuleRequestWithDefaults() *EditRuleRequest {
	this := EditRuleRequest{}
	return &this
}

// GetQueries returns the Queries field value if set, zero value otherwise.
func (o *EditRuleRequest) GetQueries() []Query {
	if o == nil || o.Queries == nil {
		var ret []Query
		return ret
	}
	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditRuleRequest) GetQueriesOk() ([]Query, bool) {
	if o == nil || o.Queries == nil {
		return nil, false
	}
	return o.Queries, true
}

// HasQueries returns a boolean if a field has been set.
func (o *EditRuleRequest) HasQueries() bool {
	if o != nil && o.Queries != nil {
		return true
	}

	return false
}

// SetQueries gets a reference to the given []Query and assigns it to the Queries field.
func (o *EditRuleRequest) SetQueries(v []Query) {
	o.Queries = v
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *EditRuleRequest) GetWindow() Window {
	if o == nil || o.Window == nil {
		var ret Window
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditRuleRequest) GetWindowOk() (*Window, bool) {
	if o == nil || o.Window == nil {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *EditRuleRequest) HasWindow() bool {
	if o != nil && o.Window != nil {
		return true
	}

	return false
}

// SetWindow gets a reference to the given Window and assigns it to the Window field.
func (o *EditRuleRequest) SetWindow(v Window) {
	o.Window = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *EditRuleRequest) GetFrequency() Frequency {
	if o == nil || o.Frequency == nil {
		var ret Frequency
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditRuleRequest) GetFrequencyOk() (*Frequency, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *EditRuleRequest) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given Frequency and assigns it to the Frequency field.
func (o *EditRuleRequest) SetFrequency(v Frequency) {
	o.Frequency = &v
}

// GetTriggerAfter returns the TriggerAfter field value if set, zero value otherwise.
func (o *EditRuleRequest) GetTriggerAfter() TriggerAfter {
	if o == nil || o.TriggerAfter == nil {
		var ret TriggerAfter
		return ret
	}
	return *o.TriggerAfter
}

// GetTriggerAfterOk returns a tuple with the TriggerAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditRuleRequest) GetTriggerAfterOk() (*TriggerAfter, bool) {
	if o == nil || o.TriggerAfter == nil {
		return nil, false
	}
	return o.TriggerAfter, true
}

// HasTriggerAfter returns a boolean if a field has been set.
func (o *EditRuleRequest) HasTriggerAfter() bool {
	if o != nil && o.TriggerAfter != nil {
		return true
	}

	return false
}

// SetTriggerAfter gets a reference to the given TriggerAfter and assigns it to the TriggerAfter field.
func (o *EditRuleRequest) SetTriggerAfter(v TriggerAfter) {
	o.TriggerAfter = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *EditRuleRequest) GetActions() []RuleAction {
	if o == nil || o.Actions == nil {
		var ret []RuleAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditRuleRequest) GetActionsOk() ([]RuleAction, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *EditRuleRequest) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []RuleAction and assigns it to the Actions field.
func (o *EditRuleRequest) SetActions(v []RuleAction) {
	o.Actions = v
}

// GetSelectors returns the Selectors field value if set, zero value otherwise.
func (o *EditRuleRequest) GetSelectors() Selector {
	if o == nil || o.Selectors == nil {
		var ret Selector
		return ret
	}
	return *o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditRuleRequest) GetSelectorsOk() (*Selector, bool) {
	if o == nil || o.Selectors == nil {
		return nil, false
	}
	return o.Selectors, true
}

// HasSelectors returns a boolean if a field has been set.
func (o *EditRuleRequest) HasSelectors() bool {
	if o != nil && o.Selectors != nil {
		return true
	}

	return false
}

// SetSelectors gets a reference to the given Selector and assigns it to the Selectors field.
func (o *EditRuleRequest) SetSelectors(v Selector) {
	o.Selectors = &v
}

func (o EditRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Queries != nil {
		toSerialize["queries"] = o.Queries
	}
	if o.Window != nil {
		toSerialize["window"] = o.Window
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.TriggerAfter != nil {
		toSerialize["trigger_after"] = o.TriggerAfter
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.Selectors != nil {
		toSerialize["selectors"] = o.Selectors
	}
	return json.Marshal(toSerialize)
}

type NullableEditRuleRequest struct {
	value *EditRuleRequest
	isSet bool
}

func (v NullableEditRuleRequest) Get() *EditRuleRequest {
	return v.value
}

func (v *NullableEditRuleRequest) Set(val *EditRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditRuleRequest(val *EditRuleRequest) *NullableEditRuleRequest {
	return &NullableEditRuleRequest{value: val, isSet: true}
}

func (v NullableEditRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


