/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// VSphereExtra struct for VSphereExtra
type VSphereExtra struct {
	// Name or ID of the Vsphere folder to place the machine into. Required for Vsphere 6.7
	Folder *string `json:"folder,omitempty"`
	// Name or ID of a VSphere datastore
	Datastore *string `json:"datastore,omitempty"`
}

// NewVSphereExtra instantiates a new VSphereExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVSphereExtra() *VSphereExtra {
	this := VSphereExtra{}
	return &this
}

// NewVSphereExtraWithDefaults instantiates a new VSphereExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVSphereExtraWithDefaults() *VSphereExtra {
	this := VSphereExtra{}
	return &this
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *VSphereExtra) GetFolder() string {
	if o == nil || o.Folder == nil {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VSphereExtra) GetFolderOk() (*string, bool) {
	if o == nil || o.Folder == nil {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *VSphereExtra) HasFolder() bool {
	if o != nil && o.Folder != nil {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *VSphereExtra) SetFolder(v string) {
	o.Folder = &v
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *VSphereExtra) GetDatastore() string {
	if o == nil || o.Datastore == nil {
		var ret string
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VSphereExtra) GetDatastoreOk() (*string, bool) {
	if o == nil || o.Datastore == nil {
		return nil, false
	}
	return o.Datastore, true
}

// HasDatastore returns a boolean if a field has been set.
func (o *VSphereExtra) HasDatastore() bool {
	if o != nil && o.Datastore != nil {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given string and assigns it to the Datastore field.
func (o *VSphereExtra) SetDatastore(v string) {
	o.Datastore = &v
}

func (o VSphereExtra) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Folder != nil {
		toSerialize["folder"] = o.Folder
	}
	if o.Datastore != nil {
		toSerialize["datastore"] = o.Datastore
	}
	return json.Marshal(toSerialize)
}

type NullableVSphereExtra struct {
	value *VSphereExtra
	isSet bool
}

func (v NullableVSphereExtra) Get() *VSphereExtra {
	return v.value
}

func (v *NullableVSphereExtra) Set(val *VSphereExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableVSphereExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableVSphereExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVSphereExtra(val *VSphereExtra) *NullableVSphereExtra {
	return &NullableVSphereExtra{value: val, isSet: true}
}

func (v NullableVSphereExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVSphereExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


