/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"fmt"
)

// ResourceType the model 'ResourceType'
type ResourceType string

// List of ResourceType
const (
	BUCKETS ResourceType = "buckets"
	CLOUDS ResourceType = "clouds"
	CLUSTERS ResourceType = "clusters"
	IMAGES ResourceType = "images"
	KEYS ResourceType = "keys"
	MACHINES ResourceType = "machines"
	NETWORKS ResourceType = "networks"
	RECORDS ResourceType = "records"
	RULES ResourceType = "rules"
	SCHEDULES ResourceType = "schedules"
	SCRIPTS ResourceType = "scripts"
	STACKS ResourceType = "stacks"
	SUBNETS ResourceType = "subnets"
	TEAMS ResourceType = "teams"
	TEMPLATES ResourceType = "templates"
	TUNNELS ResourceType = "tunnels"
	VOLUMES ResourceType = "volumes"
	ZONES ResourceType = "zones"
)

func (v *ResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceType(value)
	for _, existing := range []ResourceType{ "buckets", "clouds", "clusters", "images", "keys", "machines", "networks", "records", "rules", "schedules", "scripts", "stacks", "subnets", "teams", "templates", "tunnels", "volumes", "zones",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceType", value)
}

// Ptr returns reference to ResourceType value
func (v ResourceType) Ptr() *ResourceType {
	return &v
}

type NullableResourceType struct {
	value *ResourceType
	isSet bool
}

func (v NullableResourceType) Get() *ResourceType {
	return v.value
}

func (v *NullableResourceType) Set(val *ResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceType(val *ResourceType) *NullableResourceType {
	return &NullableResourceType{value: val, isSet: true}
}

func (v NullableResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

