/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// HelmChart struct for HelmChart
type HelmChart struct {
	Type string `json:"type"`
	// The url of the Helm repository
	RepoUrl string `json:"repo_url"`
	ChartName string `json:"chart_name"`
	ReleaseName string `json:"release_name"`
	// The namespace to install the release on
	Namespace *string `json:"namespace,omitempty"`
	// The contents of a Helm values.yaml file
	Values *string `json:"values,omitempty"`
	// A version constraint for the chart
	Version *string `json:"version,omitempty"`
}

// NewHelmChart instantiates a new HelmChart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmChart(type_ string, repoUrl string, chartName string, releaseName string) *HelmChart {
	this := HelmChart{}
	this.Type = type_
	this.RepoUrl = repoUrl
	this.ChartName = chartName
	this.ReleaseName = releaseName
	return &this
}

// NewHelmChartWithDefaults instantiates a new HelmChart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmChartWithDefaults() *HelmChart {
	this := HelmChart{}
	return &this
}

// GetType returns the Type field value
func (o *HelmChart) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *HelmChart) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *HelmChart) SetType(v string) {
	o.Type = v
}

// GetRepoUrl returns the RepoUrl field value
func (o *HelmChart) GetRepoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepoUrl
}

// GetRepoUrlOk returns a tuple with the RepoUrl field value
// and a boolean to check if the value has been set.
func (o *HelmChart) GetRepoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepoUrl, true
}

// SetRepoUrl sets field value
func (o *HelmChart) SetRepoUrl(v string) {
	o.RepoUrl = v
}

// GetChartName returns the ChartName field value
func (o *HelmChart) GetChartName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChartName
}

// GetChartNameOk returns a tuple with the ChartName field value
// and a boolean to check if the value has been set.
func (o *HelmChart) GetChartNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChartName, true
}

// SetChartName sets field value
func (o *HelmChart) SetChartName(v string) {
	o.ChartName = v
}

// GetReleaseName returns the ReleaseName field value
func (o *HelmChart) GetReleaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value
// and a boolean to check if the value has been set.
func (o *HelmChart) GetReleaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseName, true
}

// SetReleaseName sets field value
func (o *HelmChart) SetReleaseName(v string) {
	o.ReleaseName = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *HelmChart) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmChart) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *HelmChart) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *HelmChart) SetNamespace(v string) {
	o.Namespace = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *HelmChart) GetValues() string {
	if o == nil || o.Values == nil {
		var ret string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmChart) GetValuesOk() (*string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *HelmChart) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given string and assigns it to the Values field.
func (o *HelmChart) SetValues(v string) {
	o.Values = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HelmChart) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmChart) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HelmChart) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *HelmChart) SetVersion(v string) {
	o.Version = &v
}

func (o HelmChart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["repo_url"] = o.RepoUrl
	}
	if true {
		toSerialize["chart_name"] = o.ChartName
	}
	if true {
		toSerialize["release_name"] = o.ReleaseName
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableHelmChart struct {
	value *HelmChart
	isSet bool
}

func (v NullableHelmChart) Get() *HelmChart {
	return v.value
}

func (v *NullableHelmChart) Set(val *HelmChart) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmChart) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmChart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmChart(val *HelmChart) *NullableHelmChart {
	return &NullableHelmChart{value: val, isSet: true}
}

func (v NullableHelmChart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmChart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


