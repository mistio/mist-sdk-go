/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// TriggerAfter struct for TriggerAfter
type TriggerAfter struct {
	// a positive integer denoting the tolerance period
	Offset int32 `json:"offset"`
	// units of time, e.g. \"seconds\"
	Period string `json:"period"`
}

// NewTriggerAfter instantiates a new TriggerAfter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTriggerAfter(offset int32, period string) *TriggerAfter {
	this := TriggerAfter{}
	this.Offset = offset
	this.Period = period
	return &this
}

// NewTriggerAfterWithDefaults instantiates a new TriggerAfter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerAfterWithDefaults() *TriggerAfter {
	this := TriggerAfter{}
	return &this
}

// GetOffset returns the Offset field value
func (o *TriggerAfter) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *TriggerAfter) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *TriggerAfter) SetOffset(v int32) {
	o.Offset = v
}

// GetPeriod returns the Period field value
func (o *TriggerAfter) GetPeriod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *TriggerAfter) GetPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *TriggerAfter) SetPeriod(v string) {
	o.Period = v
}

func (o TriggerAfter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["offset"] = o.Offset
	}
	if true {
		toSerialize["period"] = o.Period
	}
	return json.Marshal(toSerialize)
}

type NullableTriggerAfter struct {
	value *TriggerAfter
	isSet bool
}

func (v NullableTriggerAfter) Get() *TriggerAfter {
	return v.value
}

func (v *NullableTriggerAfter) Set(val *TriggerAfter) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerAfter) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerAfter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerAfter(val *TriggerAfter) *NullableTriggerAfter {
	return &NullableTriggerAfter{value: val, isSet: true}
}

func (v NullableTriggerAfter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerAfter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


