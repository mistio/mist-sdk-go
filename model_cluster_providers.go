/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"fmt"
)

// ClusterProviders The cloud provider of the cluster
type ClusterProviders string

// List of ClusterProviders
/*const (
	AMAZON ClusterProviders = "amazon"
	AZURE ClusterProviders = "azure"
	DIGITALOCEAN ClusterProviders = "digitalocean"
	GOOGLE ClusterProviders = "google"
	KUBERNETES ClusterProviders = "kubernetes"
	OPENSHIFT ClusterProviders = "openshift"
	LINODE ClusterProviders = "linode"
)*/

func (v *ClusterProviders) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterProviders(value)
	for _, existing := range []ClusterProviders{"amazon", "azure", "digitalocean", "google", "kubernetes", "openshift", "linode"} {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterProviders", value)
}

// Ptr returns reference to ClusterProviders value
func (v ClusterProviders) Ptr() *ClusterProviders {
	return &v
}

type NullableClusterProviders struct {
	value *ClusterProviders
	isSet bool
}

func (v NullableClusterProviders) Get() *ClusterProviders {
	return v.value
}

func (v *NullableClusterProviders) Set(val *ClusterProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterProviders(val *ClusterProviders) *NullableClusterProviders {
	return &NullableClusterProviders{value: val, isSet: true}
}

func (v NullableClusterProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
