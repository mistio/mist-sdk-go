/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// DockerExtraLimits struct for DockerExtraLimits
type DockerExtraLimits struct {
	// The cpu quota. For example with a value of 1.5 the container is guaranteed at most one and a half of the CPUs
	Cpu *float32 `json:"cpu,omitempty"`
	// The memory limit in MBs to apply
	Memory *int32 `json:"memory,omitempty"`
}

// NewDockerExtraLimits instantiates a new DockerExtraLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDockerExtraLimits() *DockerExtraLimits {
	this := DockerExtraLimits{}
	return &this
}

// NewDockerExtraLimitsWithDefaults instantiates a new DockerExtraLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDockerExtraLimitsWithDefaults() *DockerExtraLimits {
	this := DockerExtraLimits{}
	return &this
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *DockerExtraLimits) GetCpu() float32 {
	if o == nil || o.Cpu == nil {
		var ret float32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerExtraLimits) GetCpuOk() (*float32, bool) {
	if o == nil || o.Cpu == nil {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *DockerExtraLimits) HasCpu() bool {
	if o != nil && o.Cpu != nil {
		return true
	}

	return false
}

// SetCpu gets a reference to the given float32 and assigns it to the Cpu field.
func (o *DockerExtraLimits) SetCpu(v float32) {
	o.Cpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *DockerExtraLimits) GetMemory() int32 {
	if o == nil || o.Memory == nil {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DockerExtraLimits) GetMemoryOk() (*int32, bool) {
	if o == nil || o.Memory == nil {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *DockerExtraLimits) HasMemory() bool {
	if o != nil && o.Memory != nil {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *DockerExtraLimits) SetMemory(v int32) {
	o.Memory = &v
}

func (o DockerExtraLimits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cpu != nil {
		toSerialize["cpu"] = o.Cpu
	}
	if o.Memory != nil {
		toSerialize["memory"] = o.Memory
	}
	return json.Marshal(toSerialize)
}

type NullableDockerExtraLimits struct {
	value *DockerExtraLimits
	isSet bool
}

func (v NullableDockerExtraLimits) Get() *DockerExtraLimits {
	return v.value
}

func (v *NullableDockerExtraLimits) Set(val *DockerExtraLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableDockerExtraLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableDockerExtraLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDockerExtraLimits(val *DockerExtraLimits) *NullableDockerExtraLimits {
	return &NullableDockerExtraLimits{value: val, isSet: true}
}

func (v NullableDockerExtraLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDockerExtraLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


