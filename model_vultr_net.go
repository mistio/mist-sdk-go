/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// VultrNet struct for VultrNet
type VultrNet struct {
	// An array of network names or IDs to attach to this machine, invalid for \"Bare Metal\" machines
	Networks []string `json:"networks,omitempty"`
	// Enable IPv6, defaults to false
	Ipv6 *bool `json:"ipv6,omitempty"`
	// The hostname to use when deploying this machine, defaults to machine name
	Hostname *string `json:"hostname,omitempty"`
}

// NewVultrNet instantiates a new VultrNet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVultrNet() *VultrNet {
	this := VultrNet{}
	return &this
}

// NewVultrNetWithDefaults instantiates a new VultrNet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVultrNetWithDefaults() *VultrNet {
	this := VultrNet{}
	return &this
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *VultrNet) GetNetworks() []string {
	if o == nil || o.Networks == nil {
		var ret []string
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VultrNet) GetNetworksOk() ([]string, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *VultrNet) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *VultrNet) SetNetworks(v []string) {
	o.Networks = v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *VultrNet) GetIpv6() bool {
	if o == nil || o.Ipv6 == nil {
		var ret bool
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VultrNet) GetIpv6Ok() (*bool, bool) {
	if o == nil || o.Ipv6 == nil {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *VultrNet) HasIpv6() bool {
	if o != nil && o.Ipv6 != nil {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given bool and assigns it to the Ipv6 field.
func (o *VultrNet) SetIpv6(v bool) {
	o.Ipv6 = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *VultrNet) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VultrNet) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *VultrNet) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *VultrNet) SetHostname(v string) {
	o.Hostname = &v
}

func (o VultrNet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.Ipv6 != nil {
		toSerialize["ipv6"] = o.Ipv6
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	return json.Marshal(toSerialize)
}

type NullableVultrNet struct {
	value *VultrNet
	isSet bool
}

func (v NullableVultrNet) Get() *VultrNet {
	return v.value
}

func (v *NullableVultrNet) Set(val *VultrNet) {
	v.value = val
	v.isSet = true
}

func (v NullableVultrNet) IsSet() bool {
	return v.isSet
}

func (v *NullableVultrNet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVultrNet(val *VultrNet) *NullableVultrNet {
	return &NullableVultrNet{value: val, isSet: true}
}

func (v NullableVultrNet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVultrNet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


