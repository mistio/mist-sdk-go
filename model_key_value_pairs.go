/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// KeyValuePairs struct for KeyValuePairs
type KeyValuePairs struct {
	// Secret data
	Secret []KeyValuePairsSecret `json:"secret,omitempty"`
}

// NewKeyValuePairs instantiates a new KeyValuePairs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyValuePairs() *KeyValuePairs {
	this := KeyValuePairs{}
	return &this
}

// NewKeyValuePairsWithDefaults instantiates a new KeyValuePairs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyValuePairsWithDefaults() *KeyValuePairs {
	this := KeyValuePairs{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *KeyValuePairs) GetSecret() []KeyValuePairsSecret {
	if o == nil || o.Secret == nil {
		var ret []KeyValuePairsSecret
		return ret
	}
	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyValuePairs) GetSecretOk() ([]KeyValuePairsSecret, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *KeyValuePairs) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given []KeyValuePairsSecret and assigns it to the Secret field.
func (o *KeyValuePairs) SetSecret(v []KeyValuePairsSecret) {
	o.Secret = v
}

func (o KeyValuePairs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableKeyValuePairs struct {
	value *KeyValuePairs
	isSet bool
}

func (v NullableKeyValuePairs) Get() *KeyValuePairs {
	return v.value
}

func (v *NullableKeyValuePairs) Set(val *KeyValuePairs) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyValuePairs) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyValuePairs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyValuePairs(val *KeyValuePairs) *NullableKeyValuePairs {
	return &NullableKeyValuePairs{value: val, isSet: true}
}

func (v NullableKeyValuePairs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyValuePairs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


