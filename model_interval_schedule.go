/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"time"
)

// IntervalSchedule interval schedule
type IntervalSchedule struct {
	Every int32 `json:"every"`
	// The datetime when schedule should expire, e.g 2021-09-22T18:19:28Z
	Expires *time.Time `json:"expires,omitempty"`
	MaxRunCount *int32 `json:"max_run_count,omitempty"`
	Period string `json:"period"`
	ScheduleType string `json:"schedule_type"`
	// The datetime when schedule should start running, e.g 2021-09-22T18:19:28Z
	StartAfter *time.Time `json:"start_after,omitempty"`
}

// NewIntervalSchedule instantiates a new IntervalSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntervalSchedule(every int32, period string, scheduleType string, ) *IntervalSchedule {
	this := IntervalSchedule{}
	this.Every = every
	this.Period = period
	this.ScheduleType = scheduleType
	return &this
}

// NewIntervalScheduleWithDefaults instantiates a new IntervalSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntervalScheduleWithDefaults() *IntervalSchedule {
	this := IntervalSchedule{}
	return &this
}

// GetEvery returns the Every field value
func (o *IntervalSchedule) GetEvery() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Every
}

// GetEveryOk returns a tuple with the Every field value
// and a boolean to check if the value has been set.
func (o *IntervalSchedule) GetEveryOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Every, true
}

// SetEvery sets field value
func (o *IntervalSchedule) SetEvery(v int32) {
	o.Every = v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *IntervalSchedule) GetExpires() time.Time {
	if o == nil || o.Expires == nil {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalSchedule) GetExpiresOk() (*time.Time, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *IntervalSchedule) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *IntervalSchedule) SetExpires(v time.Time) {
	o.Expires = &v
}

// GetMaxRunCount returns the MaxRunCount field value if set, zero value otherwise.
func (o *IntervalSchedule) GetMaxRunCount() int32 {
	if o == nil || o.MaxRunCount == nil {
		var ret int32
		return ret
	}
	return *o.MaxRunCount
}

// GetMaxRunCountOk returns a tuple with the MaxRunCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalSchedule) GetMaxRunCountOk() (*int32, bool) {
	if o == nil || o.MaxRunCount == nil {
		return nil, false
	}
	return o.MaxRunCount, true
}

// HasMaxRunCount returns a boolean if a field has been set.
func (o *IntervalSchedule) HasMaxRunCount() bool {
	if o != nil && o.MaxRunCount != nil {
		return true
	}

	return false
}

// SetMaxRunCount gets a reference to the given int32 and assigns it to the MaxRunCount field.
func (o *IntervalSchedule) SetMaxRunCount(v int32) {
	o.MaxRunCount = &v
}

// GetPeriod returns the Period field value
func (o *IntervalSchedule) GetPeriod() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value
// and a boolean to check if the value has been set.
func (o *IntervalSchedule) GetPeriodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Period, true
}

// SetPeriod sets field value
func (o *IntervalSchedule) SetPeriod(v string) {
	o.Period = v
}

// GetScheduleType returns the ScheduleType field value
func (o *IntervalSchedule) GetScheduleType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value
// and a boolean to check if the value has been set.
func (o *IntervalSchedule) GetScheduleTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ScheduleType, true
}

// SetScheduleType sets field value
func (o *IntervalSchedule) SetScheduleType(v string) {
	o.ScheduleType = v
}

// GetStartAfter returns the StartAfter field value if set, zero value otherwise.
func (o *IntervalSchedule) GetStartAfter() time.Time {
	if o == nil || o.StartAfter == nil {
		var ret time.Time
		return ret
	}
	return *o.StartAfter
}

// GetStartAfterOk returns a tuple with the StartAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntervalSchedule) GetStartAfterOk() (*time.Time, bool) {
	if o == nil || o.StartAfter == nil {
		return nil, false
	}
	return o.StartAfter, true
}

// HasStartAfter returns a boolean if a field has been set.
func (o *IntervalSchedule) HasStartAfter() bool {
	if o != nil && o.StartAfter != nil {
		return true
	}

	return false
}

// SetStartAfter gets a reference to the given time.Time and assigns it to the StartAfter field.
func (o *IntervalSchedule) SetStartAfter(v time.Time) {
	o.StartAfter = &v
}

func (o IntervalSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["every"] = o.Every
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if o.MaxRunCount != nil {
		toSerialize["max_run_count"] = o.MaxRunCount
	}
	if true {
		toSerialize["period"] = o.Period
	}
	if true {
		toSerialize["schedule_type"] = o.ScheduleType
	}
	if o.StartAfter != nil {
		toSerialize["start_after"] = o.StartAfter
	}
	return json.Marshal(toSerialize)
}

type NullableIntervalSchedule struct {
	value *IntervalSchedule
	isSet bool
}

func (v NullableIntervalSchedule) Get() *IntervalSchedule {
	return v.value
}

func (v *NullableIntervalSchedule) Set(val *IntervalSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalSchedule(val *IntervalSchedule) *NullableIntervalSchedule {
	return &NullableIntervalSchedule{value: val, isSet: true}
}

func (v NullableIntervalSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


