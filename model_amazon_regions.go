/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"fmt"
)

// AmazonRegions the model 'AmazonRegions'
type AmazonRegions string

// List of AmazonRegions
const (
	AP_NORTHEAST_1 AmazonRegions = "ap-northeast-1"
	AP_NORTHEAST_2 AmazonRegions = "ap-northeast-2"
	AP_NORTHEAST_3 AmazonRegions = "ap-northeast-3"
	AP_SOUTHEAST_1 AmazonRegions = "ap-southeast-1"
	AP_SOUTHEAST_2 AmazonRegions = "ap-southeast-2"
	EU_CENTRAL_1 AmazonRegions = "eu-central-1"
	EU_WEST_1 AmazonRegions = "eu-west-1"
	EU_WEST_2 AmazonRegions = "eu-west-2"
	EU_WEST_3 AmazonRegions = "eu-west-3"
	EU_NORTH_1 AmazonRegions = "eu-north-1"
	CA_CENTRAL_1 AmazonRegions = "ca-central-1"
	SA_EAST_1 AmazonRegions = "sa-east-1"
	US_EAST_1 AmazonRegions = "us-east-1"
	US_WEST_1 AmazonRegions = "us-west-1"
	US_WEST_2 AmazonRegions = "us-west-2"
	US_EAST_2 AmazonRegions = "us-east-2"
	AP_SOUTH_1 AmazonRegions = "ap-south-1"
	AP_EAST_1 AmazonRegions = "ap-east-1"
	CN_NORTH_1 AmazonRegions = "cn-north-1"
	CN_NORTHWEST_1 AmazonRegions = "cn-northwest-1"
	US_GOV_WEST_1 AmazonRegions = "us-gov-west-1"
	US_GOV_EAST_1 AmazonRegions = "us-gov-east-1"
)

// All allowed values of AmazonRegions enum
var AllowedAmazonRegionsEnumValues = []AmazonRegions{
	"ap-northeast-1",
	"ap-northeast-2",
	"ap-northeast-3",
	"ap-southeast-1",
	"ap-southeast-2",
	"eu-central-1",
	"eu-west-1",
	"eu-west-2",
	"eu-west-3",
	"eu-north-1",
	"ca-central-1",
	"sa-east-1",
	"us-east-1",
	"us-west-1",
	"us-west-2",
	"us-east-2",
	"ap-south-1",
	"ap-east-1",
	"cn-north-1",
	"cn-northwest-1",
	"us-gov-west-1",
	"us-gov-east-1",
}

func (v *AmazonRegions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AmazonRegions(value)
	for _, existing := range AllowedAmazonRegionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AmazonRegions", value)
}

// NewAmazonRegionsFromValue returns a pointer to a valid AmazonRegions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmazonRegionsFromValue(v string) (*AmazonRegions, error) {
	ev := AmazonRegions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AmazonRegions: valid values are %v", v, AllowedAmazonRegionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AmazonRegions) IsValid() bool {
	for _, existing := range AllowedAmazonRegionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AmazonRegions value
func (v AmazonRegions) Ptr() *AmazonRegions {
	return &v
}

type NullableAmazonRegions struct {
	value *AmazonRegions
	isSet bool
}

func (v NullableAmazonRegions) Get() *AmazonRegions {
	return v.value
}

func (v *NullableAmazonRegions) Set(val *AmazonRegions) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonRegions) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonRegions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonRegions(val *AmazonRegions) *NullableAmazonRegions {
	return &NullableAmazonRegions{value: val, isSet: true}
}

func (v NullableAmazonRegions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonRegions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

