/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// GoogleNet struct for GoogleNet
type GoogleNet struct {
	// The network to associate with the machine
	Network *string `json:"network,omitempty"`
	// The subnetwork resource for this machine
	Subnetwork *string `json:"subnetwork,omitempty"`
}

// NewGoogleNet instantiates a new GoogleNet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoogleNet() *GoogleNet {
	this := GoogleNet{}
	return &this
}

// NewGoogleNetWithDefaults instantiates a new GoogleNet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoogleNetWithDefaults() *GoogleNet {
	this := GoogleNet{}
	return &this
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *GoogleNet) GetNetwork() string {
	if o == nil || o.Network == nil {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleNet) GetNetworkOk() (*string, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *GoogleNet) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *GoogleNet) SetNetwork(v string) {
	o.Network = &v
}

// GetSubnetwork returns the Subnetwork field value if set, zero value otherwise.
func (o *GoogleNet) GetSubnetwork() string {
	if o == nil || o.Subnetwork == nil {
		var ret string
		return ret
	}
	return *o.Subnetwork
}

// GetSubnetworkOk returns a tuple with the Subnetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleNet) GetSubnetworkOk() (*string, bool) {
	if o == nil || o.Subnetwork == nil {
		return nil, false
	}
	return o.Subnetwork, true
}

// HasSubnetwork returns a boolean if a field has been set.
func (o *GoogleNet) HasSubnetwork() bool {
	if o != nil && o.Subnetwork != nil {
		return true
	}

	return false
}

// SetSubnetwork gets a reference to the given string and assigns it to the Subnetwork field.
func (o *GoogleNet) SetSubnetwork(v string) {
	o.Subnetwork = &v
}

func (o GoogleNet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	if o.Subnetwork != nil {
		toSerialize["subnetwork"] = o.Subnetwork
	}
	return json.Marshal(toSerialize)
}

type NullableGoogleNet struct {
	value *GoogleNet
	isSet bool
}

func (v NullableGoogleNet) Get() *GoogleNet {
	return v.value
}

func (v *NullableGoogleNet) Set(val *GoogleNet) {
	v.value = val
	v.isSet = true
}

func (v NullableGoogleNet) IsSet() bool {
	return v.isSet
}

func (v *NullableGoogleNet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoogleNet(val *GoogleNet) *NullableGoogleNet {
	return &NullableGoogleNet{value: val, isSet: true}
}

func (v NullableGoogleNet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoogleNet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


