/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AddKeyResponse struct for AddKeyResponse
type AddKeyResponse struct {
	Id *string `json:"id,omitempty"`
	Private *string `json:"private,omitempty"`
	Public *string `json:"public,omitempty"`
}

// NewAddKeyResponse instantiates a new AddKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddKeyResponse() *AddKeyResponse {
	this := AddKeyResponse{}
	return &this
}

// NewAddKeyResponseWithDefaults instantiates a new AddKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddKeyResponseWithDefaults() *AddKeyResponse {
	this := AddKeyResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddKeyResponse) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddKeyResponse) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddKeyResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddKeyResponse) SetId(v string) {
	o.Id = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *AddKeyResponse) GetPrivate() string {
	if o == nil || o.Private == nil {
		var ret string
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddKeyResponse) GetPrivateOk() (*string, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *AddKeyResponse) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given string and assigns it to the Private field.
func (o *AddKeyResponse) SetPrivate(v string) {
	o.Private = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *AddKeyResponse) GetPublic() string {
	if o == nil || o.Public == nil {
		var ret string
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddKeyResponse) GetPublicOk() (*string, bool) {
	if o == nil || o.Public == nil {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *AddKeyResponse) HasPublic() bool {
	if o != nil && o.Public != nil {
		return true
	}

	return false
}

// SetPublic gets a reference to the given string and assigns it to the Public field.
func (o *AddKeyResponse) SetPublic(v string) {
	o.Public = &v
}

func (o AddKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if o.Public != nil {
		toSerialize["public"] = o.Public
	}
	return json.Marshal(toSerialize)
}

type NullableAddKeyResponse struct {
	value *AddKeyResponse
	isSet bool
}

func (v NullableAddKeyResponse) Get() *AddKeyResponse {
	return v.value
}

func (v *NullableAddKeyResponse) Set(val *AddKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAddKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAddKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddKeyResponse(val *AddKeyResponse) *NullableAddKeyResponse {
	return &NullableAddKeyResponse{value: val, isSet: true}
}

func (v NullableAddKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


