/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
	"fmt"
)

// Selector - struct for Selector
type Selector struct {
	AgeSelector *AgeSelector
	FieldSelector *FieldSelector
	ResourceSelector *ResourceSelector
	TaggingSelector *TaggingSelector
}

// AgeSelectorAsSelector is a convenience function that returns AgeSelector wrapped in Selector
func AgeSelectorAsSelector(v *AgeSelector) Selector {
	return Selector{ AgeSelector: v}
}

// FieldSelectorAsSelector is a convenience function that returns FieldSelector wrapped in Selector
func FieldSelectorAsSelector(v *FieldSelector) Selector {
	return Selector{ FieldSelector: v}
}

// ResourceSelectorAsSelector is a convenience function that returns ResourceSelector wrapped in Selector
func ResourceSelectorAsSelector(v *ResourceSelector) Selector {
	return Selector{ ResourceSelector: v}
}

// TaggingSelectorAsSelector is a convenience function that returns TaggingSelector wrapped in Selector
func TaggingSelectorAsSelector(v *TaggingSelector) Selector {
	return Selector{ TaggingSelector: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Selector) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AgeSelector
	err = json.Unmarshal(data, &dst.AgeSelector)
	if err == nil {
		jsonAgeSelector, _ := json.Marshal(dst.AgeSelector)
		if string(jsonAgeSelector) == "{}" { // empty struct
			dst.AgeSelector = nil
		} else {
			match++
		}
	} else {
		dst.AgeSelector = nil
	}

	// try to unmarshal data into FieldSelector
	err = json.Unmarshal(data, &dst.FieldSelector)
	if err == nil {
		jsonFieldSelector, _ := json.Marshal(dst.FieldSelector)
		if string(jsonFieldSelector) == "{}" { // empty struct
			dst.FieldSelector = nil
		} else {
			match++
		}
	} else {
		dst.FieldSelector = nil
	}

	// try to unmarshal data into ResourceSelector
	err = json.Unmarshal(data, &dst.ResourceSelector)
	if err == nil {
		jsonResourceSelector, _ := json.Marshal(dst.ResourceSelector)
		if string(jsonResourceSelector) == "{}" { // empty struct
			dst.ResourceSelector = nil
		} else {
			match++
		}
	} else {
		dst.ResourceSelector = nil
	}

	// try to unmarshal data into TaggingSelector
	err = json.Unmarshal(data, &dst.TaggingSelector)
	if err == nil {
		jsonTaggingSelector, _ := json.Marshal(dst.TaggingSelector)
		if string(jsonTaggingSelector) == "{}" { // empty struct
			dst.TaggingSelector = nil
		} else {
			match++
		}
	} else {
		dst.TaggingSelector = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AgeSelector = nil
		dst.FieldSelector = nil
		dst.ResourceSelector = nil
		dst.TaggingSelector = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Selector)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Selector)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Selector) MarshalJSON() ([]byte, error) {
	if src.AgeSelector != nil {
		return json.Marshal(&src.AgeSelector)
	}

	if src.FieldSelector != nil {
		return json.Marshal(&src.FieldSelector)
	}

	if src.ResourceSelector != nil {
		return json.Marshal(&src.ResourceSelector)
	}

	if src.TaggingSelector != nil {
		return json.Marshal(&src.TaggingSelector)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Selector) GetActualInstance() (interface{}) {
	if obj.AgeSelector != nil {
		return obj.AgeSelector
	}

	if obj.FieldSelector != nil {
		return obj.FieldSelector
	}

	if obj.ResourceSelector != nil {
		return obj.ResourceSelector
	}

	if obj.TaggingSelector != nil {
		return obj.TaggingSelector
	}

	// all schemas are nil
	return nil
}

type NullableSelector struct {
	value *Selector
	isSet bool
}

func (v NullableSelector) Get() *Selector {
	return v.value
}

func (v *NullableSelector) Set(val *Selector) {
	v.value = val
	v.isSet = true
}

func (v NullableSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelector(val *Selector) *NullableSelector {
	return &NullableSelector{value: val, isSet: true}
}

func (v NullableSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


