/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// Condition struct for Condition
type Condition struct {
	DataType *DataType `json:"data_type,omitempty"`
	Window *Window `json:"window,omitempty"`
	Query *Query `json:"query,omitempty"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition() *Condition {
	this := Condition{}
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *Condition) GetDataType() DataType {
	if o == nil || o.DataType == nil {
		var ret DataType
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetDataTypeOk() (*DataType, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *Condition) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given DataType and assigns it to the DataType field.
func (o *Condition) SetDataType(v DataType) {
	o.DataType = &v
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *Condition) GetWindow() Window {
	if o == nil || o.Window == nil {
		var ret Window
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetWindowOk() (*Window, bool) {
	if o == nil || o.Window == nil {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *Condition) HasWindow() bool {
	if o != nil && o.Window != nil {
		return true
	}

	return false
}

// SetWindow gets a reference to the given Window and assigns it to the Window field.
func (o *Condition) SetWindow(v Window) {
	o.Window = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Condition) GetQuery() Query {
	if o == nil || o.Query == nil {
		var ret Query
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Condition) GetQueryOk() (*Query, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Condition) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given Query and assigns it to the Query field.
func (o *Condition) SetQuery(v Query) {
	o.Query = &v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataType != nil {
		toSerialize["data_type"] = o.DataType
	}
	if o.Window != nil {
		toSerialize["window"] = o.Window
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	return json.Marshal(toSerialize)
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


