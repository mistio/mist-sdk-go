/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// ExistingScript struct for ExistingScript
type ExistingScript struct {
	// the Id of the existing script to be executed 
	ScriptId string `json:"scriptId"`
}

// NewExistingScript instantiates a new ExistingScript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExistingScript(scriptId string) *ExistingScript {
	this := ExistingScript{}
	this.ScriptId = scriptId
	return &this
}

// NewExistingScriptWithDefaults instantiates a new ExistingScript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExistingScriptWithDefaults() *ExistingScript {
	this := ExistingScript{}
	return &this
}

// GetScriptId returns the ScriptId field value
func (o *ExistingScript) GetScriptId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScriptId
}

// GetScriptIdOk returns a tuple with the ScriptId field value
// and a boolean to check if the value has been set.
func (o *ExistingScript) GetScriptIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScriptId, true
}

// SetScriptId sets field value
func (o *ExistingScript) SetScriptId(v string) {
	o.ScriptId = v
}

func (o ExistingScript) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["scriptId"] = o.ScriptId
	}
	return json.Marshal(toSerialize)
}

type NullableExistingScript struct {
	value *ExistingScript
	isSet bool
}

func (v NullableExistingScript) Get() *ExistingScript {
	return v.value
}

func (v *NullableExistingScript) Set(val *ExistingScript) {
	v.value = val
	v.isSet = true
}

func (v NullableExistingScript) IsSet() bool {
	return v.isSet
}

func (v *NullableExistingScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExistingScript(val *ExistingScript) *NullableExistingScript {
	return &NullableExistingScript{value: val, isSet: true}
}

func (v NullableExistingScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExistingScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


