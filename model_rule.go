/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// Rule struct for Rule
type Rule struct {
	Actions *map[string]interface{} `json:"actions,omitempty"`
	DataType *string `json:"data_type,omitempty"`
	Disabled *string `json:"disabled,omitempty"`
	Frequency *map[string]interface{} `json:"frequency,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Queries *map[string]interface{} `json:"queries,omitempty"`
	TriggeredAfter *map[string]interface{} `json:"triggered_after,omitempty"`
	Window *map[string]interface{} `json:"window,omitempty"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule() *Rule {
	this := Rule{}
	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *Rule) GetActions() map[string]interface{} {
	if o == nil || o.Actions == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetActionsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *Rule) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given map[string]interface{} and assigns it to the Actions field.
func (o *Rule) SetActions(v map[string]interface{}) {
	o.Actions = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *Rule) GetDataType() string {
	if o == nil || o.DataType == nil {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDataTypeOk() (*string, bool) {
	if o == nil || o.DataType == nil {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *Rule) HasDataType() bool {
	if o != nil && o.DataType != nil {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *Rule) SetDataType(v string) {
	o.DataType = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Rule) GetDisabled() string {
	if o == nil || o.Disabled == nil {
		var ret string
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDisabledOk() (*string, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Rule) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given string and assigns it to the Disabled field.
func (o *Rule) SetDisabled(v string) {
	o.Disabled = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *Rule) GetFrequency() map[string]interface{} {
	if o == nil || o.Frequency == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetFrequencyOk() (*map[string]interface{}, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *Rule) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given map[string]interface{} and assigns it to the Frequency field.
func (o *Rule) SetFrequency(v map[string]interface{}) {
	o.Frequency = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Rule) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Rule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Rule) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Rule) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Rule) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Rule) SetName(v string) {
	o.Name = &v
}

// GetQueries returns the Queries field value if set, zero value otherwise.
func (o *Rule) GetQueries() map[string]interface{} {
	if o == nil || o.Queries == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetQueriesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Queries == nil {
		return nil, false
	}
	return o.Queries, true
}

// HasQueries returns a boolean if a field has been set.
func (o *Rule) HasQueries() bool {
	if o != nil && o.Queries != nil {
		return true
	}

	return false
}

// SetQueries gets a reference to the given map[string]interface{} and assigns it to the Queries field.
func (o *Rule) SetQueries(v map[string]interface{}) {
	o.Queries = &v
}

// GetTriggeredAfter returns the TriggeredAfter field value if set, zero value otherwise.
func (o *Rule) GetTriggeredAfter() map[string]interface{} {
	if o == nil || o.TriggeredAfter == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.TriggeredAfter
}

// GetTriggeredAfterOk returns a tuple with the TriggeredAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetTriggeredAfterOk() (*map[string]interface{}, bool) {
	if o == nil || o.TriggeredAfter == nil {
		return nil, false
	}
	return o.TriggeredAfter, true
}

// HasTriggeredAfter returns a boolean if a field has been set.
func (o *Rule) HasTriggeredAfter() bool {
	if o != nil && o.TriggeredAfter != nil {
		return true
	}

	return false
}

// SetTriggeredAfter gets a reference to the given map[string]interface{} and assigns it to the TriggeredAfter field.
func (o *Rule) SetTriggeredAfter(v map[string]interface{}) {
	o.TriggeredAfter = &v
}

// GetWindow returns the Window field value if set, zero value otherwise.
func (o *Rule) GetWindow() map[string]interface{} {
	if o == nil || o.Window == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Window
}

// GetWindowOk returns a tuple with the Window field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetWindowOk() (*map[string]interface{}, bool) {
	if o == nil || o.Window == nil {
		return nil, false
	}
	return o.Window, true
}

// HasWindow returns a boolean if a field has been set.
func (o *Rule) HasWindow() bool {
	if o != nil && o.Window != nil {
		return true
	}

	return false
}

// SetWindow gets a reference to the given map[string]interface{} and assigns it to the Window field.
func (o *Rule) SetWindow(v map[string]interface{}) {
	o.Window = &v
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.DataType != nil {
		toSerialize["data_type"] = o.DataType
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Queries != nil {
		toSerialize["queries"] = o.Queries
	}
	if o.TriggeredAfter != nil {
		toSerialize["triggered_after"] = o.TriggeredAfter
	}
	if o.Window != nil {
		toSerialize["window"] = o.Window
	}
	return json.Marshal(toSerialize)
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


