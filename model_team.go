/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// Team struct for Team
type Team struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Members []Member `json:"members,omitempty"`
	MembersCount *string `json:"members_count,omitempty"`
	Description *string `json:"description,omitempty"`
	Policy map[string]interface{} `json:"policy,omitempty"`
}

// NewTeam instantiates a new Team object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeam() *Team {
	this := Team{}
	return &this
}

// NewTeamWithDefaults instantiates a new Team object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamWithDefaults() *Team {
	this := Team{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Team) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Team) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Team) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Team) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Team) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Team) SetName(v string) {
	o.Name = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Team) GetMembers() []Member {
	if o == nil || o.Members == nil {
		var ret []Member
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetMembersOk() ([]Member, bool) {
	if o == nil || o.Members == nil {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Team) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []Member and assigns it to the Members field.
func (o *Team) SetMembers(v []Member) {
	o.Members = v
}

// GetMembersCount returns the MembersCount field value if set, zero value otherwise.
func (o *Team) GetMembersCount() string {
	if o == nil || o.MembersCount == nil {
		var ret string
		return ret
	}
	return *o.MembersCount
}

// GetMembersCountOk returns a tuple with the MembersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetMembersCountOk() (*string, bool) {
	if o == nil || o.MembersCount == nil {
		return nil, false
	}
	return o.MembersCount, true
}

// HasMembersCount returns a boolean if a field has been set.
func (o *Team) HasMembersCount() bool {
	if o != nil && o.MembersCount != nil {
		return true
	}

	return false
}

// SetMembersCount gets a reference to the given string and assigns it to the MembersCount field.
func (o *Team) SetMembersCount(v string) {
	o.MembersCount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Team) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Team) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Team) SetDescription(v string) {
	o.Description = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *Team) GetPolicy() map[string]interface{} {
	if o == nil || o.Policy == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetPolicyOk() (map[string]interface{}, bool) {
	if o == nil || o.Policy == nil {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *Team) HasPolicy() bool {
	if o != nil && o.Policy != nil {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given map[string]interface{} and assigns it to the Policy field.
func (o *Team) SetPolicy(v map[string]interface{}) {
	o.Policy = v
}

func (o Team) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	if o.MembersCount != nil {
		toSerialize["members_count"] = o.MembersCount
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Policy != nil {
		toSerialize["policy"] = o.Policy
	}
	return json.Marshal(toSerialize)
}

type NullableTeam struct {
	value *Team
	isSet bool
}

func (v NullableTeam) Get() *Team {
	return v.value
}

func (v *NullableTeam) Set(val *Team) {
	v.value = val
	v.isSet = true
}

func (v NullableTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeam(val *Team) *NullableTeam {
	return &NullableTeam{value: val, isSet: true}
}

func (v NullableTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


