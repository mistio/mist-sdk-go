/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// ResourceSelector struct for ResourceSelector
type ResourceSelector struct {
	// one of \"machines\", \"volumes\", \"clusters\" or \"networks\" resource types
	Type *string `json:"type,omitempty"`
	// a list of UUIDs in case type is resource like \"machines\", \"volumes\", \"clusters\" or \"networks\"
	Ids []string `json:"ids,omitempty"`
}

// NewResourceSelector instantiates a new ResourceSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSelector() *ResourceSelector {
	this := ResourceSelector{}
	return &this
}

// NewResourceSelectorWithDefaults instantiates a new ResourceSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSelectorWithDefaults() *ResourceSelector {
	this := ResourceSelector{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceSelector) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSelector) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceSelector) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResourceSelector) SetType(v string) {
	o.Type = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *ResourceSelector) GetIds() []string {
	if o == nil || o.Ids == nil {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSelector) GetIdsOk() ([]string, bool) {
	if o == nil || o.Ids == nil {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *ResourceSelector) HasIds() bool {
	if o != nil && o.Ids != nil {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *ResourceSelector) SetIds(v []string) {
	o.Ids = v
}

func (o ResourceSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	return json.Marshal(toSerialize)
}

type NullableResourceSelector struct {
	value *ResourceSelector
	isSet bool
}

func (v NullableResourceSelector) Get() *ResourceSelector {
	return v.value
}

func (v *NullableResourceSelector) Set(val *ResourceSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSelector(val *ResourceSelector) *NullableResourceSelector {
	return &NullableResourceSelector{value: val, isSet: true}
}

func (v NullableResourceSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


