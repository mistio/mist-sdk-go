/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// ScriptToRunAllOf struct for ScriptToRunAllOf
type ScriptToRunAllOf struct {
	ScriptType *string `json:"script_type,omitempty"`
}

// NewScriptToRunAllOf instantiates a new ScriptToRunAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptToRunAllOf() *ScriptToRunAllOf {
	this := ScriptToRunAllOf{}
	return &this
}

// NewScriptToRunAllOfWithDefaults instantiates a new ScriptToRunAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptToRunAllOfWithDefaults() *ScriptToRunAllOf {
	this := ScriptToRunAllOf{}
	return &this
}

// GetScriptType returns the ScriptType field value if set, zero value otherwise.
func (o *ScriptToRunAllOf) GetScriptType() string {
	if o == nil || o.ScriptType == nil {
		var ret string
		return ret
	}
	return *o.ScriptType
}

// GetScriptTypeOk returns a tuple with the ScriptType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptToRunAllOf) GetScriptTypeOk() (*string, bool) {
	if o == nil || o.ScriptType == nil {
		return nil, false
	}
	return o.ScriptType, true
}

// HasScriptType returns a boolean if a field has been set.
func (o *ScriptToRunAllOf) HasScriptType() bool {
	if o != nil && o.ScriptType != nil {
		return true
	}

	return false
}

// SetScriptType gets a reference to the given string and assigns it to the ScriptType field.
func (o *ScriptToRunAllOf) SetScriptType(v string) {
	o.ScriptType = &v
}

func (o ScriptToRunAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScriptType != nil {
		toSerialize["script_type"] = o.ScriptType
	}
	return json.Marshal(toSerialize)
}

type NullableScriptToRunAllOf struct {
	value *ScriptToRunAllOf
	isSet bool
}

func (v NullableScriptToRunAllOf) Get() *ScriptToRunAllOf {
	return v.value
}

func (v *NullableScriptToRunAllOf) Set(val *ScriptToRunAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptToRunAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptToRunAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptToRunAllOf(val *ScriptToRunAllOf) *NullableScriptToRunAllOf {
	return &NullableScriptToRunAllOf{value: val, isSet: true}
}

func (v NullableScriptToRunAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptToRunAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


