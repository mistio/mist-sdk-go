/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// AgeSelector struct for AgeSelector
type AgeSelector struct {
	// age type
	Type *string `json:"type,omitempty"`
	// an integer value that represents the minutes passed from the creation of the resource
	Minutes *int32 `json:"minutes,omitempty"`
}

// NewAgeSelector instantiates a new AgeSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgeSelector() *AgeSelector {
	this := AgeSelector{}
	return &this
}

// NewAgeSelectorWithDefaults instantiates a new AgeSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgeSelectorWithDefaults() *AgeSelector {
	this := AgeSelector{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AgeSelector) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgeSelector) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AgeSelector) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AgeSelector) SetType(v string) {
	o.Type = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *AgeSelector) GetMinutes() int32 {
	if o == nil || o.Minutes == nil {
		var ret int32
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgeSelector) GetMinutesOk() (*int32, bool) {
	if o == nil || o.Minutes == nil {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *AgeSelector) HasMinutes() bool {
	if o != nil && o.Minutes != nil {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given int32 and assigns it to the Minutes field.
func (o *AgeSelector) SetMinutes(v int32) {
	o.Minutes = &v
}

func (o AgeSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Minutes != nil {
		toSerialize["minutes"] = o.Minutes
	}
	return json.Marshal(toSerialize)
}

type NullableAgeSelector struct {
	value *AgeSelector
	isSet bool
}

func (v NullableAgeSelector) Get() *AgeSelector {
	return v.value
}

func (v *NullableAgeSelector) Set(val *AgeSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableAgeSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableAgeSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgeSelector(val *AgeSelector) *NullableAgeSelector {
	return &NullableAgeSelector{value: val, isSet: true}
}

func (v NullableAgeSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgeSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


