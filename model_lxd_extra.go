/*
 * Mist API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 * Contact: api@mist.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// LXDExtra struct for LXDExtra
type LXDExtra struct {
	// Whether to destroy the container on shutdown, defaults to False
	Ephemeral *bool `json:"ephemeral,omitempty"`
	Limits *LXDExtraLimits `json:"limits,omitempty"`
}

// NewLXDExtra instantiates a new LXDExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLXDExtra() *LXDExtra {
	this := LXDExtra{}
	return &this
}

// NewLXDExtraWithDefaults instantiates a new LXDExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLXDExtraWithDefaults() *LXDExtra {
	this := LXDExtra{}
	return &this
}

// GetEphemeral returns the Ephemeral field value if set, zero value otherwise.
func (o *LXDExtra) GetEphemeral() bool {
	if o == nil || o.Ephemeral == nil {
		var ret bool
		return ret
	}
	return *o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LXDExtra) GetEphemeralOk() (*bool, bool) {
	if o == nil || o.Ephemeral == nil {
		return nil, false
	}
	return o.Ephemeral, true
}

// HasEphemeral returns a boolean if a field has been set.
func (o *LXDExtra) HasEphemeral() bool {
	if o != nil && o.Ephemeral != nil {
		return true
	}

	return false
}

// SetEphemeral gets a reference to the given bool and assigns it to the Ephemeral field.
func (o *LXDExtra) SetEphemeral(v bool) {
	o.Ephemeral = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *LXDExtra) GetLimits() LXDExtraLimits {
	if o == nil || o.Limits == nil {
		var ret LXDExtraLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LXDExtra) GetLimitsOk() (*LXDExtraLimits, bool) {
	if o == nil || o.Limits == nil {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *LXDExtra) HasLimits() bool {
	if o != nil && o.Limits != nil {
		return true
	}

	return false
}

// SetLimits gets a reference to the given LXDExtraLimits and assigns it to the Limits field.
func (o *LXDExtra) SetLimits(v LXDExtraLimits) {
	o.Limits = &v
}

func (o LXDExtra) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ephemeral != nil {
		toSerialize["ephemeral"] = o.Ephemeral
	}
	if o.Limits != nil {
		toSerialize["limits"] = o.Limits
	}
	return json.Marshal(toSerialize)
}

type NullableLXDExtra struct {
	value *LXDExtra
	isSet bool
}

func (v NullableLXDExtra) Get() *LXDExtra {
	return v.value
}

func (v *NullableLXDExtra) Set(val *LXDExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableLXDExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableLXDExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLXDExtra(val *LXDExtra) *NullableLXDExtra {
	return &NullableLXDExtra{value: val, isSet: true}
}

func (v NullableLXDExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLXDExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


