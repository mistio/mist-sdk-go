/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// LinodeExtra struct for LinodeExtra
type LinodeExtra struct {
	// Set root password. If not given a secure password will be generated
	RootPass *string `json:"root_pass,omitempty"`
}

// NewLinodeExtra instantiates a new LinodeExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinodeExtra() *LinodeExtra {
	this := LinodeExtra{}
	return &this
}

// NewLinodeExtraWithDefaults instantiates a new LinodeExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinodeExtraWithDefaults() *LinodeExtra {
	this := LinodeExtra{}
	return &this
}

// GetRootPass returns the RootPass field value if set, zero value otherwise.
func (o *LinodeExtra) GetRootPass() string {
	if o == nil || o.RootPass == nil {
		var ret string
		return ret
	}
	return *o.RootPass
}

// GetRootPassOk returns a tuple with the RootPass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinodeExtra) GetRootPassOk() (*string, bool) {
	if o == nil || o.RootPass == nil {
		return nil, false
	}
	return o.RootPass, true
}

// HasRootPass returns a boolean if a field has been set.
func (o *LinodeExtra) HasRootPass() bool {
	if o != nil && o.RootPass != nil {
		return true
	}

	return false
}

// SetRootPass gets a reference to the given string and assigns it to the RootPass field.
func (o *LinodeExtra) SetRootPass(v string) {
	o.RootPass = &v
}

func (o LinodeExtra) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RootPass != nil {
		toSerialize["root_pass"] = o.RootPass
	}
	return json.Marshal(toSerialize)
}

type NullableLinodeExtra struct {
	value *LinodeExtra
	isSet bool
}

func (v NullableLinodeExtra) Get() *LinodeExtra {
	return v.value
}

func (v *NullableLinodeExtra) Set(val *LinodeExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableLinodeExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableLinodeExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinodeExtra(val *LinodeExtra) *NullableLinodeExtra {
	return &NullableLinodeExtra{value: val, isSet: true}
}

func (v NullableLinodeExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinodeExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


