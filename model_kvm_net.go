/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// KVMNet struct for KVMNet
type KVMNet struct {
	Networks []KVMNetNetworks `json:"networks,omitempty"`
	Vnfs []string `json:"vnfs,omitempty"`
}

// NewKVMNet instantiates a new KVMNet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKVMNet() *KVMNet {
	this := KVMNet{}
	return &this
}

// NewKVMNetWithDefaults instantiates a new KVMNet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKVMNetWithDefaults() *KVMNet {
	this := KVMNet{}
	return &this
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *KVMNet) GetNetworks() []KVMNetNetworks {
	if o == nil || o.Networks == nil {
		var ret []KVMNetNetworks
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVMNet) GetNetworksOk() ([]KVMNetNetworks, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *KVMNet) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []KVMNetNetworks and assigns it to the Networks field.
func (o *KVMNet) SetNetworks(v []KVMNetNetworks) {
	o.Networks = v
}

// GetVnfs returns the Vnfs field value if set, zero value otherwise.
func (o *KVMNet) GetVnfs() []string {
	if o == nil || o.Vnfs == nil {
		var ret []string
		return ret
	}
	return o.Vnfs
}

// GetVnfsOk returns a tuple with the Vnfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KVMNet) GetVnfsOk() ([]string, bool) {
	if o == nil || o.Vnfs == nil {
		return nil, false
	}
	return o.Vnfs, true
}

// HasVnfs returns a boolean if a field has been set.
func (o *KVMNet) HasVnfs() bool {
	if o != nil && o.Vnfs != nil {
		return true
	}

	return false
}

// SetVnfs gets a reference to the given []string and assigns it to the Vnfs field.
func (o *KVMNet) SetVnfs(v []string) {
	o.Vnfs = v
}

func (o KVMNet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	if o.Vnfs != nil {
		toSerialize["vnfs"] = o.Vnfs
	}
	return json.Marshal(toSerialize)
}

type NullableKVMNet struct {
	value *KVMNet
	isSet bool
}

func (v NullableKVMNet) Get() *KVMNet {
	return v.value
}

func (v *NullableKVMNet) Set(val *KVMNet) {
	v.value = val
	v.isSet = true
}

func (v NullableKVMNet) IsSet() bool {
	return v.isSet
}

func (v *NullableKVMNet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKVMNet(val *KVMNet) *NullableKVMNet {
	return &NullableKVMNet{value: val, isSet: true}
}

func (v NullableKVMNet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKVMNet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


