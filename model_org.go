/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// Org struct for Org
type Org struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	CloudsCount *string `json:"clouds_count,omitempty"`
	TeamsCount *string `json:"teams_count,omitempty"`
	TotalMachineCount *string `json:"total_machine_count,omitempty"`
	Created *bool `json:"created,omitempty"`
	EnterprisePlan map[string]interface{} `json:"enterprise_plan,omitempty"`
	SelectedPlan *string `json:"selected_plan,omitempty"`
	LastActive *string `json:"last_active,omitempty"`
	Resources *OrgResourcesSummary `json:"resources,omitempty"`
}

// NewOrg instantiates a new Org object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrg() *Org {
	this := Org{}
	return &this
}

// NewOrgWithDefaults instantiates a new Org object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgWithDefaults() *Org {
	this := Org{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Org) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Org) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Org) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Org) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Org) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Org) SetName(v string) {
	o.Name = &v
}

// GetCloudsCount returns the CloudsCount field value if set, zero value otherwise.
func (o *Org) GetCloudsCount() string {
	if o == nil || o.CloudsCount == nil {
		var ret string
		return ret
	}
	return *o.CloudsCount
}

// GetCloudsCountOk returns a tuple with the CloudsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetCloudsCountOk() (*string, bool) {
	if o == nil || o.CloudsCount == nil {
		return nil, false
	}
	return o.CloudsCount, true
}

// HasCloudsCount returns a boolean if a field has been set.
func (o *Org) HasCloudsCount() bool {
	if o != nil && o.CloudsCount != nil {
		return true
	}

	return false
}

// SetCloudsCount gets a reference to the given string and assigns it to the CloudsCount field.
func (o *Org) SetCloudsCount(v string) {
	o.CloudsCount = &v
}

// GetTeamsCount returns the TeamsCount field value if set, zero value otherwise.
func (o *Org) GetTeamsCount() string {
	if o == nil || o.TeamsCount == nil {
		var ret string
		return ret
	}
	return *o.TeamsCount
}

// GetTeamsCountOk returns a tuple with the TeamsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetTeamsCountOk() (*string, bool) {
	if o == nil || o.TeamsCount == nil {
		return nil, false
	}
	return o.TeamsCount, true
}

// HasTeamsCount returns a boolean if a field has been set.
func (o *Org) HasTeamsCount() bool {
	if o != nil && o.TeamsCount != nil {
		return true
	}

	return false
}

// SetTeamsCount gets a reference to the given string and assigns it to the TeamsCount field.
func (o *Org) SetTeamsCount(v string) {
	o.TeamsCount = &v
}

// GetTotalMachineCount returns the TotalMachineCount field value if set, zero value otherwise.
func (o *Org) GetTotalMachineCount() string {
	if o == nil || o.TotalMachineCount == nil {
		var ret string
		return ret
	}
	return *o.TotalMachineCount
}

// GetTotalMachineCountOk returns a tuple with the TotalMachineCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetTotalMachineCountOk() (*string, bool) {
	if o == nil || o.TotalMachineCount == nil {
		return nil, false
	}
	return o.TotalMachineCount, true
}

// HasTotalMachineCount returns a boolean if a field has been set.
func (o *Org) HasTotalMachineCount() bool {
	if o != nil && o.TotalMachineCount != nil {
		return true
	}

	return false
}

// SetTotalMachineCount gets a reference to the given string and assigns it to the TotalMachineCount field.
func (o *Org) SetTotalMachineCount(v string) {
	o.TotalMachineCount = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Org) GetCreated() bool {
	if o == nil || o.Created == nil {
		var ret bool
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetCreatedOk() (*bool, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Org) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given bool and assigns it to the Created field.
func (o *Org) SetCreated(v bool) {
	o.Created = &v
}

// GetEnterprisePlan returns the EnterprisePlan field value if set, zero value otherwise.
func (o *Org) GetEnterprisePlan() map[string]interface{} {
	if o == nil || o.EnterprisePlan == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.EnterprisePlan
}

// GetEnterprisePlanOk returns a tuple with the EnterprisePlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetEnterprisePlanOk() (map[string]interface{}, bool) {
	if o == nil || o.EnterprisePlan == nil {
		return nil, false
	}
	return o.EnterprisePlan, true
}

// HasEnterprisePlan returns a boolean if a field has been set.
func (o *Org) HasEnterprisePlan() bool {
	if o != nil && o.EnterprisePlan != nil {
		return true
	}

	return false
}

// SetEnterprisePlan gets a reference to the given map[string]interface{} and assigns it to the EnterprisePlan field.
func (o *Org) SetEnterprisePlan(v map[string]interface{}) {
	o.EnterprisePlan = v
}

// GetSelectedPlan returns the SelectedPlan field value if set, zero value otherwise.
func (o *Org) GetSelectedPlan() string {
	if o == nil || o.SelectedPlan == nil {
		var ret string
		return ret
	}
	return *o.SelectedPlan
}

// GetSelectedPlanOk returns a tuple with the SelectedPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetSelectedPlanOk() (*string, bool) {
	if o == nil || o.SelectedPlan == nil {
		return nil, false
	}
	return o.SelectedPlan, true
}

// HasSelectedPlan returns a boolean if a field has been set.
func (o *Org) HasSelectedPlan() bool {
	if o != nil && o.SelectedPlan != nil {
		return true
	}

	return false
}

// SetSelectedPlan gets a reference to the given string and assigns it to the SelectedPlan field.
func (o *Org) SetSelectedPlan(v string) {
	o.SelectedPlan = &v
}

// GetLastActive returns the LastActive field value if set, zero value otherwise.
func (o *Org) GetLastActive() string {
	if o == nil || o.LastActive == nil {
		var ret string
		return ret
	}
	return *o.LastActive
}

// GetLastActiveOk returns a tuple with the LastActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetLastActiveOk() (*string, bool) {
	if o == nil || o.LastActive == nil {
		return nil, false
	}
	return o.LastActive, true
}

// HasLastActive returns a boolean if a field has been set.
func (o *Org) HasLastActive() bool {
	if o != nil && o.LastActive != nil {
		return true
	}

	return false
}

// SetLastActive gets a reference to the given string and assigns it to the LastActive field.
func (o *Org) SetLastActive(v string) {
	o.LastActive = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *Org) GetResources() OrgResourcesSummary {
	if o == nil || o.Resources == nil {
		var ret OrgResourcesSummary
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Org) GetResourcesOk() (*OrgResourcesSummary, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *Org) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given OrgResourcesSummary and assigns it to the Resources field.
func (o *Org) SetResources(v OrgResourcesSummary) {
	o.Resources = &v
}

func (o Org) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CloudsCount != nil {
		toSerialize["clouds_count"] = o.CloudsCount
	}
	if o.TeamsCount != nil {
		toSerialize["teams_count"] = o.TeamsCount
	}
	if o.TotalMachineCount != nil {
		toSerialize["total_machine_count"] = o.TotalMachineCount
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.EnterprisePlan != nil {
		toSerialize["enterprise_plan"] = o.EnterprisePlan
	}
	if o.SelectedPlan != nil {
		toSerialize["selected_plan"] = o.SelectedPlan
	}
	if o.LastActive != nil {
		toSerialize["last_active"] = o.LastActive
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableOrg struct {
	value *Org
	isSet bool
}

func (v NullableOrg) Get() *Org {
	return v.value
}

func (v *NullableOrg) Set(val *Org) {
	v.value = val
	v.isSet = true
}

func (v NullableOrg) IsSet() bool {
	return v.isSet
}

func (v *NullableOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrg(val *Org) *NullableOrg {
	return &NullableOrg{value: val, isSet: true}
}

func (v NullableOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


