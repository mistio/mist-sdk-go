/*
Mist API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: api@mist.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mist_sdk

import (
	"encoding/json"
)

// CreateSecretRequest struct for CreateSecretRequest
type CreateSecretRequest struct {
	// The full path of the secret
	Name string `json:"name"`
	Json *bool `json:"json,omitempty"`
	Secret string `json:"secret"`
}

// NewCreateSecretRequest instantiates a new CreateSecretRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSecretRequest(name string, secret string) *CreateSecretRequest {
	this := CreateSecretRequest{}
	this.Name = name
	var json bool = false
	this.Json = &json
	this.Secret = secret
	return &this
}

// NewCreateSecretRequestWithDefaults instantiates a new CreateSecretRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSecretRequestWithDefaults() *CreateSecretRequest {
	this := CreateSecretRequest{}
	var json bool = false
	this.Json = &json
	return &this
}

// GetName returns the Name field value
func (o *CreateSecretRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateSecretRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateSecretRequest) SetName(v string) {
	o.Name = v
}

// GetJson returns the Json field value if set, zero value otherwise.
func (o *CreateSecretRequest) GetJson() bool {
	if o == nil || o.Json == nil {
		var ret bool
		return ret
	}
	return *o.Json
}

// GetJsonOk returns a tuple with the Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSecretRequest) GetJsonOk() (*bool, bool) {
	if o == nil || o.Json == nil {
		return nil, false
	}
	return o.Json, true
}

// HasJson returns a boolean if a field has been set.
func (o *CreateSecretRequest) HasJson() bool {
	if o != nil && o.Json != nil {
		return true
	}

	return false
}

// SetJson gets a reference to the given bool and assigns it to the Json field.
func (o *CreateSecretRequest) SetJson(v bool) {
	o.Json = &v
}

// GetSecret returns the Secret field value
func (o *CreateSecretRequest) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *CreateSecretRequest) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *CreateSecretRequest) SetSecret(v string) {
	o.Secret = v
}

func (o CreateSecretRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Json != nil {
		toSerialize["json"] = o.Json
	}
	if true {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSecretRequest struct {
	value *CreateSecretRequest
	isSet bool
}

func (v NullableCreateSecretRequest) Get() *CreateSecretRequest {
	return v.value
}

func (v *NullableCreateSecretRequest) Set(val *CreateSecretRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSecretRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSecretRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSecretRequest(val *CreateSecretRequest) *NullableCreateSecretRequest {
	return &NullableCreateSecretRequest{value: val, isSet: true}
}

func (v NullableCreateSecretRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSecretRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


